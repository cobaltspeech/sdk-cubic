//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cubic.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Service that implements the Cobalt Cubic Speech Recognition API
///
/// Usage: instantiate `Cobaltspeech_Cubic_CubicClient`, then call methods of this protocol to make API calls.
public protocol Cobaltspeech_Cubic_CubicClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cobaltspeech_Cubic_CubicClientInterceptorFactoryProtocol? { get }

  func version(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cobaltspeech_Cubic_VersionResponse>

  func listModels(
    _ request: Cobaltspeech_Cubic_ListModelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cobaltspeech_Cubic_ListModelsRequest, Cobaltspeech_Cubic_ListModelsResponse>

  func recognize(
    _ request: Cobaltspeech_Cubic_RecognizeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cobaltspeech_Cubic_RecognizeRequest, Cobaltspeech_Cubic_RecognitionResponse>

  func streamingRecognize(
    callOptions: CallOptions?,
    handler: @escaping (Cobaltspeech_Cubic_RecognitionResponse) -> Void
  ) -> BidirectionalStreamingCall<Cobaltspeech_Cubic_StreamingRecognizeRequest, Cobaltspeech_Cubic_RecognitionResponse>

  func compileContext(
    _ request: Cobaltspeech_Cubic_CompileContextRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cobaltspeech_Cubic_CompileContextRequest, Cobaltspeech_Cubic_CompileContextResponse>
}

extension Cobaltspeech_Cubic_CubicClientProtocol {
  public var serviceName: String {
    return "cobaltspeech.cubic.Cubic"
  }

  /// Queries the Version of the Server
  ///
  /// - Parameters:
  ///   - request: Request to send to Version.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func version(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cobaltspeech_Cubic_VersionResponse> {
    return self.makeUnaryCall(
      path: "/cobaltspeech.cubic.Cubic/Version",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVersionInterceptors() ?? []
    )
  }

  /// Retrieves a list of available speech recognition models
  ///
  /// - Parameters:
  ///   - request: Request to send to ListModels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listModels(
    _ request: Cobaltspeech_Cubic_ListModelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cobaltspeech_Cubic_ListModelsRequest, Cobaltspeech_Cubic_ListModelsResponse> {
    return self.makeUnaryCall(
      path: "/cobaltspeech.cubic.Cubic/ListModels",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListModelsInterceptors() ?? []
    )
  }

  /// Performs synchronous speech recognition: receive results after all audio
  /// has been sent and processed.  It is expected that this request be typically
  /// used for short audio content: less than a minute long.  For longer content,
  /// the `StreamingRecognize` method should be preferred.
  ///
  /// - Parameters:
  ///   - request: Request to send to Recognize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func recognize(
    _ request: Cobaltspeech_Cubic_RecognizeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cobaltspeech_Cubic_RecognizeRequest, Cobaltspeech_Cubic_RecognitionResponse> {
    return self.makeUnaryCall(
      path: "/cobaltspeech.cubic.Cubic/Recognize",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecognizeInterceptors() ?? []
    )
  }

  /// Performs bidirectional streaming speech recognition.  Receive results while
  /// sending audio.  This method is only available via GRPC and not via
  /// HTTP+JSON. However, a web browser may use websockets to use this service.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func streamingRecognize(
    callOptions: CallOptions? = nil,
    handler: @escaping (Cobaltspeech_Cubic_RecognitionResponse) -> Void
  ) -> BidirectionalStreamingCall<Cobaltspeech_Cubic_StreamingRecognizeRequest, Cobaltspeech_Cubic_RecognitionResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/cobaltspeech.cubic.Cubic/StreamingRecognize",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamingRecognizeInterceptors() ?? [],
      handler: handler
    )
  }

  /// Compiles recognition context information, such as a specialized list of
  /// words or phrases, into a compact, efficient form to send with subsequent
  /// `Recognize` or `StreamingRecognize` requests to customize speech
  /// recognition. For example, a list of contact names may be compiled in a
  /// mobile app and sent with each recognition request so that the app user's
  /// contact names are more likely to be recognized than arbitrary names. This
  /// pre-compilation ensures that there is no added latency for the recognition
  /// request. It is important to note that in order to compile context for a
  /// model, that model has to support context in the first place, which can be
  /// verified by checking its `ModelAttributes.ContextInfo` obtained via the
  /// `ListModels` method. Also, the compiled data will be model specific; that
  /// is, the data compiled for one model will generally not be usable with a
  /// different model.
  ///
  /// - Parameters:
  ///   - request: Request to send to CompileContext.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func compileContext(
    _ request: Cobaltspeech_Cubic_CompileContextRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cobaltspeech_Cubic_CompileContextRequest, Cobaltspeech_Cubic_CompileContextResponse> {
    return self.makeUnaryCall(
      path: "/cobaltspeech.cubic.Cubic/CompileContext",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompileContextInterceptors() ?? []
    )
  }
}

public protocol Cobaltspeech_Cubic_CubicClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'version'.
  func makeVersionInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Cobaltspeech_Cubic_VersionResponse>]

  /// - Returns: Interceptors to use when invoking 'listModels'.
  func makeListModelsInterceptors() -> [ClientInterceptor<Cobaltspeech_Cubic_ListModelsRequest, Cobaltspeech_Cubic_ListModelsResponse>]

  /// - Returns: Interceptors to use when invoking 'recognize'.
  func makeRecognizeInterceptors() -> [ClientInterceptor<Cobaltspeech_Cubic_RecognizeRequest, Cobaltspeech_Cubic_RecognitionResponse>]

  /// - Returns: Interceptors to use when invoking 'streamingRecognize'.
  func makeStreamingRecognizeInterceptors() -> [ClientInterceptor<Cobaltspeech_Cubic_StreamingRecognizeRequest, Cobaltspeech_Cubic_RecognitionResponse>]

  /// - Returns: Interceptors to use when invoking 'compileContext'.
  func makeCompileContextInterceptors() -> [ClientInterceptor<Cobaltspeech_Cubic_CompileContextRequest, Cobaltspeech_Cubic_CompileContextResponse>]
}

public final class Cobaltspeech_Cubic_CubicClient: Cobaltspeech_Cubic_CubicClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cobaltspeech_Cubic_CubicClientInterceptorFactoryProtocol?

  /// Creates a client for the cobaltspeech.cubic.Cubic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cobaltspeech_Cubic_CubicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

