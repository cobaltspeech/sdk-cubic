//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cubic.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Cobaltspeech_Cubic_CubicClient, then call methods of this protocol to make API calls.
public protocol Cobaltspeech_Cubic_CubicClientProtocol {
  func version(_ request: SwiftProtobuf.Google_Protobuf_Empty, callOptions: CallOptions?) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cobaltspeech_Cubic_VersionResponse>
  func listModels(_ request: Cobaltspeech_Cubic_ListModelsRequest, callOptions: CallOptions?) -> UnaryCall<Cobaltspeech_Cubic_ListModelsRequest, Cobaltspeech_Cubic_ListModelsResponse>
  func recognize(_ request: Cobaltspeech_Cubic_RecognizeRequest, callOptions: CallOptions?) -> UnaryCall<Cobaltspeech_Cubic_RecognizeRequest, Cobaltspeech_Cubic_RecognitionResponse>
  func streamingRecognize(callOptions: CallOptions?, handler: @escaping (Cobaltspeech_Cubic_RecognitionResponse) -> Void) -> BidirectionalStreamingCall<Cobaltspeech_Cubic_StreamingRecognizeRequest, Cobaltspeech_Cubic_RecognitionResponse>
}

public final class Cobaltspeech_Cubic_CubicClient: GRPCClient, Cobaltspeech_Cubic_CubicClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the cobaltspeech.cubic.Cubic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Queries the Version of the Server
  ///
  /// - Parameters:
  ///   - request: Request to send to Version.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func version(_ request: SwiftProtobuf.Google_Protobuf_Empty, callOptions: CallOptions? = nil) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cobaltspeech_Cubic_VersionResponse> {
    return self.makeUnaryCall(path: "/cobaltspeech.cubic.Cubic/Version",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Retrieves a list of available speech recognition models
  ///
  /// - Parameters:
  ///   - request: Request to send to ListModels.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listModels(_ request: Cobaltspeech_Cubic_ListModelsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Cobaltspeech_Cubic_ListModelsRequest, Cobaltspeech_Cubic_ListModelsResponse> {
    return self.makeUnaryCall(path: "/cobaltspeech.cubic.Cubic/ListModels",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Performs synchronous speech recognition: receive results after all audio
  /// has been sent and processed.  It is expected that this request be typically
  /// used for short audio content: less than a minute long.  For longer content,
  /// the `StreamingRecognize` method should be preferred.
  ///
  /// - Parameters:
  ///   - request: Request to send to Recognize.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func recognize(_ request: Cobaltspeech_Cubic_RecognizeRequest, callOptions: CallOptions? = nil) -> UnaryCall<Cobaltspeech_Cubic_RecognizeRequest, Cobaltspeech_Cubic_RecognitionResponse> {
    return self.makeUnaryCall(path: "/cobaltspeech.cubic.Cubic/Recognize",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Performs bidirectional streaming speech recognition.  Receive results while
  /// sending audio.  This method is only available via GRPC and not via
  /// HTTP+JSON. However, a web browser may use websockets to use this service.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func streamingRecognize(callOptions: CallOptions? = nil, handler: @escaping (Cobaltspeech_Cubic_RecognitionResponse) -> Void) -> BidirectionalStreamingCall<Cobaltspeech_Cubic_StreamingRecognizeRequest, Cobaltspeech_Cubic_RecognitionResponse> {
    return self.makeBidirectionalStreamingCall(path: "/cobaltspeech.cubic.Cubic/StreamingRecognize",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

}


// Provides conformance to `GRPCPayload` for request and response messages
extension SwiftProtobuf.Google_Protobuf_Empty: GRPCProtobufPayload {}
extension Cobaltspeech_Cubic_VersionResponse: GRPCProtobufPayload {}
extension Cobaltspeech_Cubic_ListModelsRequest: GRPCProtobufPayload {}
extension Cobaltspeech_Cubic_ListModelsResponse: GRPCProtobufPayload {}
extension Cobaltspeech_Cubic_RecognizeRequest: GRPCProtobufPayload {}
extension Cobaltspeech_Cubic_RecognitionResponse: GRPCProtobufPayload {}
extension Cobaltspeech_Cubic_StreamingRecognizeRequest: GRPCProtobufPayload {}

