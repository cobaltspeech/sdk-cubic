// source: cubic.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.cobaltspeech.cubic.CompileContextRequest', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.CompileContextResponse', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.CompiledContext', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.ConfusionNetworkArc', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.ConfusionNetworkLink', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.ContextInfo', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.ContextPhrase', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.ListModelsRequest', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.ListModelsResponse', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.Model', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.ModelAttributes', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.RecognitionAlternative', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.RecognitionAudio', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.RecognitionConfig', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.RecognitionConfig.Encoding', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.RecognitionConfusionNetwork', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.RecognitionContext', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.RecognitionMetadata', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.RecognitionResponse', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.RecognitionResult', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.RecognizeRequest', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.StreamingRecognizeRequest', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.StreamingRecognizeRequest.RequestCase', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.VersionResponse', null, global);
goog.exportSymbol('proto.cobaltspeech.cubic.WordInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.ListModelsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.ListModelsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.ListModelsRequest.displayName = 'proto.cobaltspeech.cubic.ListModelsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.RecognizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.RecognizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.RecognizeRequest.displayName = 'proto.cobaltspeech.cubic.RecognizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cobaltspeech.cubic.StreamingRecognizeRequest.oneofGroups_);
};
goog.inherits(proto.cobaltspeech.cubic.StreamingRecognizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.StreamingRecognizeRequest.displayName = 'proto.cobaltspeech.cubic.StreamingRecognizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.CompileContextRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cobaltspeech.cubic.CompileContextRequest.repeatedFields_, null);
};
goog.inherits(proto.cobaltspeech.cubic.CompileContextRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.CompileContextRequest.displayName = 'proto.cobaltspeech.cubic.CompileContextRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.VersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.VersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.VersionResponse.displayName = 'proto.cobaltspeech.cubic.VersionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.ListModelsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cobaltspeech.cubic.ListModelsResponse.repeatedFields_, null);
};
goog.inherits(proto.cobaltspeech.cubic.ListModelsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.ListModelsResponse.displayName = 'proto.cobaltspeech.cubic.ListModelsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.RecognitionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cobaltspeech.cubic.RecognitionResponse.repeatedFields_, null);
};
goog.inherits(proto.cobaltspeech.cubic.RecognitionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.RecognitionResponse.displayName = 'proto.cobaltspeech.cubic.RecognitionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.CompileContextResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.CompileContextResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.CompileContextResponse.displayName = 'proto.cobaltspeech.cubic.CompileContextResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.RecognitionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cobaltspeech.cubic.RecognitionConfig.repeatedFields_, null);
};
goog.inherits(proto.cobaltspeech.cubic.RecognitionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.RecognitionConfig.displayName = 'proto.cobaltspeech.cubic.RecognitionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.RecognitionMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.RecognitionMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.RecognitionMetadata.displayName = 'proto.cobaltspeech.cubic.RecognitionMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.RecognitionContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cobaltspeech.cubic.RecognitionContext.repeatedFields_, null);
};
goog.inherits(proto.cobaltspeech.cubic.RecognitionContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.RecognitionContext.displayName = 'proto.cobaltspeech.cubic.RecognitionContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.CompiledContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.CompiledContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.CompiledContext.displayName = 'proto.cobaltspeech.cubic.CompiledContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.ContextPhrase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.ContextPhrase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.ContextPhrase.displayName = 'proto.cobaltspeech.cubic.ContextPhrase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.RecognitionAudio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.RecognitionAudio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.RecognitionAudio.displayName = 'proto.cobaltspeech.cubic.RecognitionAudio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.Model = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.Model, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.Model.displayName = 'proto.cobaltspeech.cubic.Model';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.ModelAttributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.ModelAttributes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.ModelAttributes.displayName = 'proto.cobaltspeech.cubic.ModelAttributes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.ContextInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cobaltspeech.cubic.ContextInfo.repeatedFields_, null);
};
goog.inherits(proto.cobaltspeech.cubic.ContextInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.ContextInfo.displayName = 'proto.cobaltspeech.cubic.ContextInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.RecognitionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cobaltspeech.cubic.RecognitionResult.repeatedFields_, null);
};
goog.inherits(proto.cobaltspeech.cubic.RecognitionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.RecognitionResult.displayName = 'proto.cobaltspeech.cubic.RecognitionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.RecognitionAlternative = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cobaltspeech.cubic.RecognitionAlternative.repeatedFields_, null);
};
goog.inherits(proto.cobaltspeech.cubic.RecognitionAlternative, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.RecognitionAlternative.displayName = 'proto.cobaltspeech.cubic.RecognitionAlternative';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.WordInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.WordInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.WordInfo.displayName = 'proto.cobaltspeech.cubic.WordInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.RecognitionConfusionNetwork = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cobaltspeech.cubic.RecognitionConfusionNetwork.repeatedFields_, null);
};
goog.inherits(proto.cobaltspeech.cubic.RecognitionConfusionNetwork, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.RecognitionConfusionNetwork.displayName = 'proto.cobaltspeech.cubic.RecognitionConfusionNetwork';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cobaltspeech.cubic.ConfusionNetworkLink.repeatedFields_, null);
};
goog.inherits(proto.cobaltspeech.cubic.ConfusionNetworkLink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.ConfusionNetworkLink.displayName = 'proto.cobaltspeech.cubic.ConfusionNetworkLink';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cobaltspeech.cubic.ConfusionNetworkArc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cobaltspeech.cubic.ConfusionNetworkArc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cobaltspeech.cubic.ConfusionNetworkArc.displayName = 'proto.cobaltspeech.cubic.ConfusionNetworkArc';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.ListModelsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.ListModelsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.ListModelsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ListModelsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.ListModelsRequest}
 */
proto.cobaltspeech.cubic.ListModelsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.ListModelsRequest;
  return proto.cobaltspeech.cubic.ListModelsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.ListModelsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.ListModelsRequest}
 */
proto.cobaltspeech.cubic.ListModelsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.ListModelsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.ListModelsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.ListModelsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ListModelsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.RecognizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.RecognizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.RecognizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.cobaltspeech.cubic.RecognitionConfig.toObject(includeInstance, f),
    audio: (f = msg.getAudio()) && proto.cobaltspeech.cubic.RecognitionAudio.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.RecognizeRequest}
 */
proto.cobaltspeech.cubic.RecognizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.RecognizeRequest;
  return proto.cobaltspeech.cubic.RecognizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.RecognizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.RecognizeRequest}
 */
proto.cobaltspeech.cubic.RecognizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cobaltspeech.cubic.RecognitionConfig;
      reader.readMessage(value,proto.cobaltspeech.cubic.RecognitionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.cobaltspeech.cubic.RecognitionAudio;
      reader.readMessage(value,proto.cobaltspeech.cubic.RecognitionAudio.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.RecognizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.RecognizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.RecognizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cobaltspeech.cubic.RecognitionConfig.serializeBinaryToWriter
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cobaltspeech.cubic.RecognitionAudio.serializeBinaryToWriter
    );
  }
};


/**
 * optional RecognitionConfig config = 1;
 * @return {?proto.cobaltspeech.cubic.RecognitionConfig}
 */
proto.cobaltspeech.cubic.RecognizeRequest.prototype.getConfig = function() {
  return /** @type{?proto.cobaltspeech.cubic.RecognitionConfig} */ (
    jspb.Message.getWrapperField(this, proto.cobaltspeech.cubic.RecognitionConfig, 1));
};


/**
 * @param {?proto.cobaltspeech.cubic.RecognitionConfig|undefined} value
 * @return {!proto.cobaltspeech.cubic.RecognizeRequest} returns this
*/
proto.cobaltspeech.cubic.RecognizeRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.RecognizeRequest} returns this
 */
proto.cobaltspeech.cubic.RecognizeRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognizeRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RecognitionAudio audio = 2;
 * @return {?proto.cobaltspeech.cubic.RecognitionAudio}
 */
proto.cobaltspeech.cubic.RecognizeRequest.prototype.getAudio = function() {
  return /** @type{?proto.cobaltspeech.cubic.RecognitionAudio} */ (
    jspb.Message.getWrapperField(this, proto.cobaltspeech.cubic.RecognitionAudio, 2));
};


/**
 * @param {?proto.cobaltspeech.cubic.RecognitionAudio|undefined} value
 * @return {!proto.cobaltspeech.cubic.RecognizeRequest} returns this
*/
proto.cobaltspeech.cubic.RecognizeRequest.prototype.setAudio = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.RecognizeRequest} returns this
 */
proto.cobaltspeech.cubic.RecognizeRequest.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognizeRequest.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  CONFIG: 1,
  AUDIO: 2
};

/**
 * @return {proto.cobaltspeech.cubic.StreamingRecognizeRequest.RequestCase}
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.prototype.getRequestCase = function() {
  return /** @type {proto.cobaltspeech.cubic.StreamingRecognizeRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.cobaltspeech.cubic.StreamingRecognizeRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.StreamingRecognizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.StreamingRecognizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.cobaltspeech.cubic.RecognitionConfig.toObject(includeInstance, f),
    audio: (f = msg.getAudio()) && proto.cobaltspeech.cubic.RecognitionAudio.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.StreamingRecognizeRequest}
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.StreamingRecognizeRequest;
  return proto.cobaltspeech.cubic.StreamingRecognizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.StreamingRecognizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.StreamingRecognizeRequest}
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cobaltspeech.cubic.RecognitionConfig;
      reader.readMessage(value,proto.cobaltspeech.cubic.RecognitionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.cobaltspeech.cubic.RecognitionAudio;
      reader.readMessage(value,proto.cobaltspeech.cubic.RecognitionAudio.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.StreamingRecognizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.StreamingRecognizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cobaltspeech.cubic.RecognitionConfig.serializeBinaryToWriter
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cobaltspeech.cubic.RecognitionAudio.serializeBinaryToWriter
    );
  }
};


/**
 * optional RecognitionConfig config = 1;
 * @return {?proto.cobaltspeech.cubic.RecognitionConfig}
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.prototype.getConfig = function() {
  return /** @type{?proto.cobaltspeech.cubic.RecognitionConfig} */ (
    jspb.Message.getWrapperField(this, proto.cobaltspeech.cubic.RecognitionConfig, 1));
};


/**
 * @param {?proto.cobaltspeech.cubic.RecognitionConfig|undefined} value
 * @return {!proto.cobaltspeech.cubic.StreamingRecognizeRequest} returns this
*/
proto.cobaltspeech.cubic.StreamingRecognizeRequest.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cobaltspeech.cubic.StreamingRecognizeRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.StreamingRecognizeRequest} returns this
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RecognitionAudio audio = 2;
 * @return {?proto.cobaltspeech.cubic.RecognitionAudio}
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.prototype.getAudio = function() {
  return /** @type{?proto.cobaltspeech.cubic.RecognitionAudio} */ (
    jspb.Message.getWrapperField(this, proto.cobaltspeech.cubic.RecognitionAudio, 2));
};


/**
 * @param {?proto.cobaltspeech.cubic.RecognitionAudio|undefined} value
 * @return {!proto.cobaltspeech.cubic.StreamingRecognizeRequest} returns this
*/
proto.cobaltspeech.cubic.StreamingRecognizeRequest.prototype.setAudio = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cobaltspeech.cubic.StreamingRecognizeRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.StreamingRecognizeRequest} returns this
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.StreamingRecognizeRequest.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cobaltspeech.cubic.CompileContextRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.CompileContextRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.CompileContextRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.CompileContextRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.CompileContextRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phrasesList: jspb.Message.toObjectList(msg.getPhrasesList(),
    proto.cobaltspeech.cubic.ContextPhrase.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.CompileContextRequest}
 */
proto.cobaltspeech.cubic.CompileContextRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.CompileContextRequest;
  return proto.cobaltspeech.cubic.CompileContextRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.CompileContextRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.CompileContextRequest}
 */
proto.cobaltspeech.cubic.CompileContextRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = new proto.cobaltspeech.cubic.ContextPhrase;
      reader.readMessage(value,proto.cobaltspeech.cubic.ContextPhrase.deserializeBinaryFromReader);
      msg.addPhrases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.CompileContextRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.CompileContextRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.CompileContextRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.CompileContextRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhrasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cobaltspeech.cubic.ContextPhrase.serializeBinaryToWriter
    );
  }
};


/**
 * optional string model_id = 1;
 * @return {string}
 */
proto.cobaltspeech.cubic.CompileContextRequest.prototype.getModelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.CompileContextRequest} returns this
 */
proto.cobaltspeech.cubic.CompileContextRequest.prototype.setModelId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.cobaltspeech.cubic.CompileContextRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.CompileContextRequest} returns this
 */
proto.cobaltspeech.cubic.CompileContextRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ContextPhrase phrases = 3;
 * @return {!Array<!proto.cobaltspeech.cubic.ContextPhrase>}
 */
proto.cobaltspeech.cubic.CompileContextRequest.prototype.getPhrasesList = function() {
  return /** @type{!Array<!proto.cobaltspeech.cubic.ContextPhrase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cobaltspeech.cubic.ContextPhrase, 3));
};


/**
 * @param {!Array<!proto.cobaltspeech.cubic.ContextPhrase>} value
 * @return {!proto.cobaltspeech.cubic.CompileContextRequest} returns this
*/
proto.cobaltspeech.cubic.CompileContextRequest.prototype.setPhrasesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cobaltspeech.cubic.ContextPhrase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cobaltspeech.cubic.ContextPhrase}
 */
proto.cobaltspeech.cubic.CompileContextRequest.prototype.addPhrases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cobaltspeech.cubic.ContextPhrase, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cobaltspeech.cubic.CompileContextRequest} returns this
 */
proto.cobaltspeech.cubic.CompileContextRequest.prototype.clearPhrasesList = function() {
  return this.setPhrasesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.VersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.VersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.VersionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.VersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cubic: jspb.Message.getFieldWithDefault(msg, 1, ""),
    server: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.VersionResponse}
 */
proto.cobaltspeech.cubic.VersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.VersionResponse;
  return proto.cobaltspeech.cubic.VersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.VersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.VersionResponse}
 */
proto.cobaltspeech.cubic.VersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCubic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.VersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.VersionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.VersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.VersionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCubic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string cubic = 1;
 * @return {string}
 */
proto.cobaltspeech.cubic.VersionResponse.prototype.getCubic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.VersionResponse} returns this
 */
proto.cobaltspeech.cubic.VersionResponse.prototype.setCubic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string server = 2;
 * @return {string}
 */
proto.cobaltspeech.cubic.VersionResponse.prototype.getServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.VersionResponse} returns this
 */
proto.cobaltspeech.cubic.VersionResponse.prototype.setServer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cobaltspeech.cubic.ListModelsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.ListModelsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.ListModelsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.ListModelsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ListModelsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelsList: jspb.Message.toObjectList(msg.getModelsList(),
    proto.cobaltspeech.cubic.Model.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.ListModelsResponse}
 */
proto.cobaltspeech.cubic.ListModelsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.ListModelsResponse;
  return proto.cobaltspeech.cubic.ListModelsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.ListModelsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.ListModelsResponse}
 */
proto.cobaltspeech.cubic.ListModelsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cobaltspeech.cubic.Model;
      reader.readMessage(value,proto.cobaltspeech.cubic.Model.deserializeBinaryFromReader);
      msg.addModels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.ListModelsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.ListModelsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.ListModelsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ListModelsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cobaltspeech.cubic.Model.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Model models = 1;
 * @return {!Array<!proto.cobaltspeech.cubic.Model>}
 */
proto.cobaltspeech.cubic.ListModelsResponse.prototype.getModelsList = function() {
  return /** @type{!Array<!proto.cobaltspeech.cubic.Model>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cobaltspeech.cubic.Model, 1));
};


/**
 * @param {!Array<!proto.cobaltspeech.cubic.Model>} value
 * @return {!proto.cobaltspeech.cubic.ListModelsResponse} returns this
*/
proto.cobaltspeech.cubic.ListModelsResponse.prototype.setModelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cobaltspeech.cubic.Model=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cobaltspeech.cubic.Model}
 */
proto.cobaltspeech.cubic.ListModelsResponse.prototype.addModels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cobaltspeech.cubic.Model, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cobaltspeech.cubic.ListModelsResponse} returns this
 */
proto.cobaltspeech.cubic.ListModelsResponse.prototype.clearModelsList = function() {
  return this.setModelsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cobaltspeech.cubic.RecognitionResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.RecognitionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.RecognitionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.RecognitionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.cobaltspeech.cubic.RecognitionResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.RecognitionResponse}
 */
proto.cobaltspeech.cubic.RecognitionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.RecognitionResponse;
  return proto.cobaltspeech.cubic.RecognitionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.RecognitionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.RecognitionResponse}
 */
proto.cobaltspeech.cubic.RecognitionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cobaltspeech.cubic.RecognitionResult;
      reader.readMessage(value,proto.cobaltspeech.cubic.RecognitionResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.RecognitionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.RecognitionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.RecognitionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cobaltspeech.cubic.RecognitionResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RecognitionResult results = 1;
 * @return {!Array<!proto.cobaltspeech.cubic.RecognitionResult>}
 */
proto.cobaltspeech.cubic.RecognitionResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.cobaltspeech.cubic.RecognitionResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cobaltspeech.cubic.RecognitionResult, 1));
};


/**
 * @param {!Array<!proto.cobaltspeech.cubic.RecognitionResult>} value
 * @return {!proto.cobaltspeech.cubic.RecognitionResponse} returns this
*/
proto.cobaltspeech.cubic.RecognitionResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cobaltspeech.cubic.RecognitionResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cobaltspeech.cubic.RecognitionResult}
 */
proto.cobaltspeech.cubic.RecognitionResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cobaltspeech.cubic.RecognitionResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cobaltspeech.cubic.RecognitionResponse} returns this
 */
proto.cobaltspeech.cubic.RecognitionResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.CompileContextResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.CompileContextResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.CompileContextResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.CompileContextResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.cobaltspeech.cubic.CompiledContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.CompileContextResponse}
 */
proto.cobaltspeech.cubic.CompileContextResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.CompileContextResponse;
  return proto.cobaltspeech.cubic.CompileContextResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.CompileContextResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.CompileContextResponse}
 */
proto.cobaltspeech.cubic.CompileContextResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cobaltspeech.cubic.CompiledContext;
      reader.readMessage(value,proto.cobaltspeech.cubic.CompiledContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.CompileContextResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.CompileContextResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.CompileContextResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.CompileContextResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cobaltspeech.cubic.CompiledContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional CompiledContext context = 1;
 * @return {?proto.cobaltspeech.cubic.CompiledContext}
 */
proto.cobaltspeech.cubic.CompileContextResponse.prototype.getContext = function() {
  return /** @type{?proto.cobaltspeech.cubic.CompiledContext} */ (
    jspb.Message.getWrapperField(this, proto.cobaltspeech.cubic.CompiledContext, 1));
};


/**
 * @param {?proto.cobaltspeech.cubic.CompiledContext|undefined} value
 * @return {!proto.cobaltspeech.cubic.CompileContextResponse} returns this
*/
proto.cobaltspeech.cubic.CompileContextResponse.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.CompileContextResponse} returns this
 */
proto.cobaltspeech.cubic.CompileContextResponse.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.CompileContextResponse.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cobaltspeech.cubic.RecognitionConfig.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.RecognitionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.RecognitionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    audioEncoding: jspb.Message.getFieldWithDefault(msg, 2, 0),
    idleTimeout: (f = msg.getIdleTimeout()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    enableWordTimeOffsets: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    enableWordConfidence: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    enableRawTranscript: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    enableConfusionNetwork: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    audioChannelsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    metadata: (f = msg.getMetadata()) && proto.cobaltspeech.cubic.RecognitionMetadata.toObject(includeInstance, f),
    context: (f = msg.getContext()) && proto.cobaltspeech.cubic.RecognitionContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig}
 */
proto.cobaltspeech.cubic.RecognitionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.RecognitionConfig;
  return proto.cobaltspeech.cubic.RecognitionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.RecognitionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig}
 */
proto.cobaltspeech.cubic.RecognitionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelId(value);
      break;
    case 2:
      var value = /** @type {!proto.cobaltspeech.cubic.RecognitionConfig.Encoding} */ (reader.readEnum());
      msg.setAudioEncoding(value);
      break;
    case 3:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setIdleTimeout(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableWordTimeOffsets(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableWordConfidence(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableRawTranscript(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableConfusionNetwork(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setAudioChannelsList(value);
      break;
    case 9:
      var value = new proto.cobaltspeech.cubic.RecognitionMetadata;
      reader.readMessage(value,proto.cobaltspeech.cubic.RecognitionMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 10:
      var value = new proto.cobaltspeech.cubic.RecognitionContext;
      reader.readMessage(value,proto.cobaltspeech.cubic.RecognitionContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.RecognitionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.RecognitionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAudioEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIdleTimeout();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getEnableWordTimeOffsets();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getEnableWordConfidence();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getEnableRawTranscript();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getEnableConfusionNetwork();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getAudioChannelsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      8,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.cobaltspeech.cubic.RecognitionMetadata.serializeBinaryToWriter
    );
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.cobaltspeech.cubic.RecognitionContext.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.cobaltspeech.cubic.RecognitionConfig.Encoding = {
  RAW_LINEAR16: 0,
  WAV: 1,
  MP3: 2,
  FLAC: 3,
  VOX8000: 4,
  ULAW8000: 5,
  ALAW8000: 6,
  OPUS: 7
};

/**
 * optional string model_id = 1;
 * @return {string}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.getModelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.setModelId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Encoding audio_encoding = 2;
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig.Encoding}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.getAudioEncoding = function() {
  return /** @type {!proto.cobaltspeech.cubic.RecognitionConfig.Encoding} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cobaltspeech.cubic.RecognitionConfig.Encoding} value
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.setAudioEncoding = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Duration idle_timeout = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.getIdleTimeout = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
*/
proto.cobaltspeech.cubic.RecognitionConfig.prototype.setIdleTimeout = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.clearIdleTimeout = function() {
  return this.setIdleTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.hasIdleTimeout = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool enable_word_time_offsets = 4;
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.getEnableWordTimeOffsets = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.setEnableWordTimeOffsets = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool enable_word_confidence = 5;
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.getEnableWordConfidence = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.setEnableWordConfidence = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool enable_raw_transcript = 6;
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.getEnableRawTranscript = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.setEnableRawTranscript = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool enable_confusion_network = 7;
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.getEnableConfusionNetwork = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.setEnableConfusionNetwork = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated uint32 audio_channels = 8;
 * @return {!Array<number>}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.getAudioChannelsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.setAudioChannelsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.addAudioChannels = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.clearAudioChannelsList = function() {
  return this.setAudioChannelsList([]);
};


/**
 * optional RecognitionMetadata metadata = 9;
 * @return {?proto.cobaltspeech.cubic.RecognitionMetadata}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.getMetadata = function() {
  return /** @type{?proto.cobaltspeech.cubic.RecognitionMetadata} */ (
    jspb.Message.getWrapperField(this, proto.cobaltspeech.cubic.RecognitionMetadata, 9));
};


/**
 * @param {?proto.cobaltspeech.cubic.RecognitionMetadata|undefined} value
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
*/
proto.cobaltspeech.cubic.RecognitionConfig.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RecognitionContext context = 10;
 * @return {?proto.cobaltspeech.cubic.RecognitionContext}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.getContext = function() {
  return /** @type{?proto.cobaltspeech.cubic.RecognitionContext} */ (
    jspb.Message.getWrapperField(this, proto.cobaltspeech.cubic.RecognitionContext, 10));
};


/**
 * @param {?proto.cobaltspeech.cubic.RecognitionContext|undefined} value
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
*/
proto.cobaltspeech.cubic.RecognitionConfig.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.RecognitionConfig} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognitionConfig.prototype.hasContext = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.RecognitionMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.RecognitionMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.RecognitionMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    customMetadata: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.RecognitionMetadata}
 */
proto.cobaltspeech.cubic.RecognitionMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.RecognitionMetadata;
  return proto.cobaltspeech.cubic.RecognitionMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.RecognitionMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.RecognitionMetadata}
 */
proto.cobaltspeech.cubic.RecognitionMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.RecognitionMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.RecognitionMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.RecognitionMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCustomMetadata();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string custom_metadata = 1;
 * @return {string}
 */
proto.cobaltspeech.cubic.RecognitionMetadata.prototype.getCustomMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.RecognitionMetadata} returns this
 */
proto.cobaltspeech.cubic.RecognitionMetadata.prototype.setCustomMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cobaltspeech.cubic.RecognitionContext.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.RecognitionContext.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.RecognitionContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.RecognitionContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    compiledList: jspb.Message.toObjectList(msg.getCompiledList(),
    proto.cobaltspeech.cubic.CompiledContext.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.RecognitionContext}
 */
proto.cobaltspeech.cubic.RecognitionContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.RecognitionContext;
  return proto.cobaltspeech.cubic.RecognitionContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.RecognitionContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.RecognitionContext}
 */
proto.cobaltspeech.cubic.RecognitionContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cobaltspeech.cubic.CompiledContext;
      reader.readMessage(value,proto.cobaltspeech.cubic.CompiledContext.deserializeBinaryFromReader);
      msg.addCompiled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.RecognitionContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.RecognitionContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.RecognitionContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompiledList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cobaltspeech.cubic.CompiledContext.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CompiledContext compiled = 1;
 * @return {!Array<!proto.cobaltspeech.cubic.CompiledContext>}
 */
proto.cobaltspeech.cubic.RecognitionContext.prototype.getCompiledList = function() {
  return /** @type{!Array<!proto.cobaltspeech.cubic.CompiledContext>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cobaltspeech.cubic.CompiledContext, 1));
};


/**
 * @param {!Array<!proto.cobaltspeech.cubic.CompiledContext>} value
 * @return {!proto.cobaltspeech.cubic.RecognitionContext} returns this
*/
proto.cobaltspeech.cubic.RecognitionContext.prototype.setCompiledList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cobaltspeech.cubic.CompiledContext=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cobaltspeech.cubic.CompiledContext}
 */
proto.cobaltspeech.cubic.RecognitionContext.prototype.addCompiled = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cobaltspeech.cubic.CompiledContext, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cobaltspeech.cubic.RecognitionContext} returns this
 */
proto.cobaltspeech.cubic.RecognitionContext.prototype.clearCompiledList = function() {
  return this.setCompiledList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.CompiledContext.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.CompiledContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.CompiledContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.CompiledContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.CompiledContext}
 */
proto.cobaltspeech.cubic.CompiledContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.CompiledContext;
  return proto.cobaltspeech.cubic.CompiledContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.CompiledContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.CompiledContext}
 */
proto.cobaltspeech.cubic.CompiledContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.CompiledContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.CompiledContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.CompiledContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.CompiledContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cobaltspeech.cubic.CompiledContext.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.cobaltspeech.cubic.CompiledContext.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.CompiledContext.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cobaltspeech.cubic.CompiledContext} returns this
 */
proto.cobaltspeech.cubic.CompiledContext.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.ContextPhrase.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.ContextPhrase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.ContextPhrase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ContextPhrase.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boost: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.ContextPhrase}
 */
proto.cobaltspeech.cubic.ContextPhrase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.ContextPhrase;
  return proto.cobaltspeech.cubic.ContextPhrase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.ContextPhrase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.ContextPhrase}
 */
proto.cobaltspeech.cubic.ContextPhrase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBoost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.ContextPhrase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.ContextPhrase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.ContextPhrase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ContextPhrase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoost();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.cobaltspeech.cubic.ContextPhrase.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.ContextPhrase} returns this
 */
proto.cobaltspeech.cubic.ContextPhrase.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float boost = 2;
 * @return {number}
 */
proto.cobaltspeech.cubic.ContextPhrase.prototype.getBoost = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.cobaltspeech.cubic.ContextPhrase} returns this
 */
proto.cobaltspeech.cubic.ContextPhrase.prototype.setBoost = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.RecognitionAudio.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.RecognitionAudio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.RecognitionAudio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionAudio.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.RecognitionAudio}
 */
proto.cobaltspeech.cubic.RecognitionAudio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.RecognitionAudio;
  return proto.cobaltspeech.cubic.RecognitionAudio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.RecognitionAudio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.RecognitionAudio}
 */
proto.cobaltspeech.cubic.RecognitionAudio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.RecognitionAudio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.RecognitionAudio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.RecognitionAudio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionAudio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cobaltspeech.cubic.RecognitionAudio.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.cobaltspeech.cubic.RecognitionAudio.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.RecognitionAudio.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cobaltspeech.cubic.RecognitionAudio} returns this
 */
proto.cobaltspeech.cubic.RecognitionAudio.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.Model.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.Model.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.Model} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.Model.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attributes: (f = msg.getAttributes()) && proto.cobaltspeech.cubic.ModelAttributes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.Model}
 */
proto.cobaltspeech.cubic.Model.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.Model;
  return proto.cobaltspeech.cubic.Model.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.Model} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.Model}
 */
proto.cobaltspeech.cubic.Model.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.cobaltspeech.cubic.ModelAttributes;
      reader.readMessage(value,proto.cobaltspeech.cubic.ModelAttributes.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.Model.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.Model.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.Model} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.Model.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cobaltspeech.cubic.ModelAttributes.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.cobaltspeech.cubic.Model.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.Model} returns this
 */
proto.cobaltspeech.cubic.Model.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.cobaltspeech.cubic.Model.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.Model} returns this
 */
proto.cobaltspeech.cubic.Model.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ModelAttributes attributes = 3;
 * @return {?proto.cobaltspeech.cubic.ModelAttributes}
 */
proto.cobaltspeech.cubic.Model.prototype.getAttributes = function() {
  return /** @type{?proto.cobaltspeech.cubic.ModelAttributes} */ (
    jspb.Message.getWrapperField(this, proto.cobaltspeech.cubic.ModelAttributes, 3));
};


/**
 * @param {?proto.cobaltspeech.cubic.ModelAttributes|undefined} value
 * @return {!proto.cobaltspeech.cubic.Model} returns this
*/
proto.cobaltspeech.cubic.Model.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.Model} returns this
 */
proto.cobaltspeech.cubic.Model.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.Model.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.ModelAttributes.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.ModelAttributes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.ModelAttributes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ModelAttributes.toObject = function(includeInstance, msg) {
  var f, obj = {
    sampleRate: jspb.Message.getFieldWithDefault(msg, 1, 0),
    contextInfo: (f = msg.getContextInfo()) && proto.cobaltspeech.cubic.ContextInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.ModelAttributes}
 */
proto.cobaltspeech.cubic.ModelAttributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.ModelAttributes;
  return proto.cobaltspeech.cubic.ModelAttributes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.ModelAttributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.ModelAttributes}
 */
proto.cobaltspeech.cubic.ModelAttributes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSampleRate(value);
      break;
    case 2:
      var value = new proto.cobaltspeech.cubic.ContextInfo;
      reader.readMessage(value,proto.cobaltspeech.cubic.ContextInfo.deserializeBinaryFromReader);
      msg.setContextInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.ModelAttributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.ModelAttributes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.ModelAttributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ModelAttributes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSampleRate();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getContextInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cobaltspeech.cubic.ContextInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 sample_rate = 1;
 * @return {number}
 */
proto.cobaltspeech.cubic.ModelAttributes.prototype.getSampleRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cobaltspeech.cubic.ModelAttributes} returns this
 */
proto.cobaltspeech.cubic.ModelAttributes.prototype.setSampleRate = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ContextInfo context_info = 2;
 * @return {?proto.cobaltspeech.cubic.ContextInfo}
 */
proto.cobaltspeech.cubic.ModelAttributes.prototype.getContextInfo = function() {
  return /** @type{?proto.cobaltspeech.cubic.ContextInfo} */ (
    jspb.Message.getWrapperField(this, proto.cobaltspeech.cubic.ContextInfo, 2));
};


/**
 * @param {?proto.cobaltspeech.cubic.ContextInfo|undefined} value
 * @return {!proto.cobaltspeech.cubic.ModelAttributes} returns this
*/
proto.cobaltspeech.cubic.ModelAttributes.prototype.setContextInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.ModelAttributes} returns this
 */
proto.cobaltspeech.cubic.ModelAttributes.prototype.clearContextInfo = function() {
  return this.setContextInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.ModelAttributes.prototype.hasContextInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cobaltspeech.cubic.ContextInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.ContextInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.ContextInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.ContextInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ContextInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    supportsContext: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    allowedContextTokensList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.ContextInfo}
 */
proto.cobaltspeech.cubic.ContextInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.ContextInfo;
  return proto.cobaltspeech.cubic.ContextInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.ContextInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.ContextInfo}
 */
proto.cobaltspeech.cubic.ContextInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowedContextTokens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.ContextInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.ContextInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.ContextInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ContextInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSupportsContext();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAllowedContextTokensList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional bool supports_context = 1;
 * @return {boolean}
 */
proto.cobaltspeech.cubic.ContextInfo.prototype.getSupportsContext = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cobaltspeech.cubic.ContextInfo} returns this
 */
proto.cobaltspeech.cubic.ContextInfo.prototype.setSupportsContext = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string allowed_context_tokens = 2;
 * @return {!Array<string>}
 */
proto.cobaltspeech.cubic.ContextInfo.prototype.getAllowedContextTokensList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cobaltspeech.cubic.ContextInfo} returns this
 */
proto.cobaltspeech.cubic.ContextInfo.prototype.setAllowedContextTokensList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cobaltspeech.cubic.ContextInfo} returns this
 */
proto.cobaltspeech.cubic.ContextInfo.prototype.addAllowedContextTokens = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cobaltspeech.cubic.ContextInfo} returns this
 */
proto.cobaltspeech.cubic.ContextInfo.prototype.clearAllowedContextTokensList = function() {
  return this.setAllowedContextTokensList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cobaltspeech.cubic.RecognitionResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.RecognitionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.RecognitionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    alternativesList: jspb.Message.toObjectList(msg.getAlternativesList(),
    proto.cobaltspeech.cubic.RecognitionAlternative.toObject, includeInstance),
    isPartial: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    cnet: (f = msg.getCnet()) && proto.cobaltspeech.cubic.RecognitionConfusionNetwork.toObject(includeInstance, f),
    audioChannel: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.RecognitionResult}
 */
proto.cobaltspeech.cubic.RecognitionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.RecognitionResult;
  return proto.cobaltspeech.cubic.RecognitionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.RecognitionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.RecognitionResult}
 */
proto.cobaltspeech.cubic.RecognitionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cobaltspeech.cubic.RecognitionAlternative;
      reader.readMessage(value,proto.cobaltspeech.cubic.RecognitionAlternative.deserializeBinaryFromReader);
      msg.addAlternatives(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPartial(value);
      break;
    case 3:
      var value = new proto.cobaltspeech.cubic.RecognitionConfusionNetwork;
      reader.readMessage(value,proto.cobaltspeech.cubic.RecognitionConfusionNetwork.deserializeBinaryFromReader);
      msg.setCnet(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAudioChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.RecognitionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.RecognitionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlternativesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cobaltspeech.cubic.RecognitionAlternative.serializeBinaryToWriter
    );
  }
  f = message.getIsPartial();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCnet();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cobaltspeech.cubic.RecognitionConfusionNetwork.serializeBinaryToWriter
    );
  }
  f = message.getAudioChannel();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * repeated RecognitionAlternative alternatives = 1;
 * @return {!Array<!proto.cobaltspeech.cubic.RecognitionAlternative>}
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.getAlternativesList = function() {
  return /** @type{!Array<!proto.cobaltspeech.cubic.RecognitionAlternative>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cobaltspeech.cubic.RecognitionAlternative, 1));
};


/**
 * @param {!Array<!proto.cobaltspeech.cubic.RecognitionAlternative>} value
 * @return {!proto.cobaltspeech.cubic.RecognitionResult} returns this
*/
proto.cobaltspeech.cubic.RecognitionResult.prototype.setAlternativesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cobaltspeech.cubic.RecognitionAlternative=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative}
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.addAlternatives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cobaltspeech.cubic.RecognitionAlternative, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cobaltspeech.cubic.RecognitionResult} returns this
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.clearAlternativesList = function() {
  return this.setAlternativesList([]);
};


/**
 * optional bool is_partial = 2;
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.getIsPartial = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cobaltspeech.cubic.RecognitionResult} returns this
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.setIsPartial = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional RecognitionConfusionNetwork cnet = 3;
 * @return {?proto.cobaltspeech.cubic.RecognitionConfusionNetwork}
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.getCnet = function() {
  return /** @type{?proto.cobaltspeech.cubic.RecognitionConfusionNetwork} */ (
    jspb.Message.getWrapperField(this, proto.cobaltspeech.cubic.RecognitionConfusionNetwork, 3));
};


/**
 * @param {?proto.cobaltspeech.cubic.RecognitionConfusionNetwork|undefined} value
 * @return {!proto.cobaltspeech.cubic.RecognitionResult} returns this
*/
proto.cobaltspeech.cubic.RecognitionResult.prototype.setCnet = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.RecognitionResult} returns this
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.clearCnet = function() {
  return this.setCnet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.hasCnet = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 audio_channel = 4;
 * @return {number}
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.getAudioChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cobaltspeech.cubic.RecognitionResult} returns this
 */
proto.cobaltspeech.cubic.RecognitionResult.prototype.setAudioChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cobaltspeech.cubic.RecognitionAlternative.repeatedFields_ = [3,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.RecognitionAlternative.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.RecognitionAlternative} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionAlternative.toObject = function(includeInstance, msg) {
  var f, obj = {
    transcript: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rawTranscript: jspb.Message.getFieldWithDefault(msg, 6, ""),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.cobaltspeech.cubic.WordInfo.toObject, includeInstance),
    rawWordsList: jspb.Message.toObjectList(msg.getRawWordsList(),
    proto.cobaltspeech.cubic.WordInfo.toObject, includeInstance),
    startTime: (f = msg.getStartTime()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    duration: (f = msg.getDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.RecognitionAlternative;
  return proto.cobaltspeech.cubic.RecognitionAlternative.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.RecognitionAlternative} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscript(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawTranscript(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    case 3:
      var value = new proto.cobaltspeech.cubic.WordInfo;
      reader.readMessage(value,proto.cobaltspeech.cubic.WordInfo.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    case 7:
      var value = new proto.cobaltspeech.cubic.WordInfo;
      reader.readMessage(value,proto.cobaltspeech.cubic.WordInfo.deserializeBinaryFromReader);
      msg.addRawWords(value);
      break;
    case 4:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setStartTime(value);
      break;
    case 5:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.RecognitionAlternative.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.RecognitionAlternative} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionAlternative.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranscript();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRawTranscript();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cobaltspeech.cubic.WordInfo.serializeBinaryToWriter
    );
  }
  f = message.getRawWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.cobaltspeech.cubic.WordInfo.serializeBinaryToWriter
    );
  }
  f = message.getStartTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transcript = 1;
 * @return {string}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.getTranscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative} returns this
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.setTranscript = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string raw_transcript = 6;
 * @return {string}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.getRawTranscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative} returns this
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.setRawTranscript = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double confidence = 2;
 * @return {number}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative} returns this
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated WordInfo words = 3;
 * @return {!Array<!proto.cobaltspeech.cubic.WordInfo>}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.cobaltspeech.cubic.WordInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cobaltspeech.cubic.WordInfo, 3));
};


/**
 * @param {!Array<!proto.cobaltspeech.cubic.WordInfo>} value
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative} returns this
*/
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.setWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cobaltspeech.cubic.WordInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cobaltspeech.cubic.WordInfo}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cobaltspeech.cubic.WordInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative} returns this
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.clearWordsList = function() {
  return this.setWordsList([]);
};


/**
 * repeated WordInfo raw_words = 7;
 * @return {!Array<!proto.cobaltspeech.cubic.WordInfo>}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.getRawWordsList = function() {
  return /** @type{!Array<!proto.cobaltspeech.cubic.WordInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cobaltspeech.cubic.WordInfo, 7));
};


/**
 * @param {!Array<!proto.cobaltspeech.cubic.WordInfo>} value
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative} returns this
*/
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.setRawWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.cobaltspeech.cubic.WordInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cobaltspeech.cubic.WordInfo}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.addRawWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.cobaltspeech.cubic.WordInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative} returns this
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.clearRawWordsList = function() {
  return this.setRawWordsList([]);
};


/**
 * optional google.protobuf.Duration start_time = 4;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.getStartTime = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 4));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative} returns this
*/
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.setStartTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative} returns this
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.clearStartTime = function() {
  return this.setStartTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Duration duration = 5;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.getDuration = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 5));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative} returns this
*/
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.RecognitionAlternative} returns this
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.RecognitionAlternative.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.WordInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.WordInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.WordInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.WordInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    word: jspb.Message.getFieldWithDefault(msg, 1, ""),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    startTime: (f = msg.getStartTime()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    duration: (f = msg.getDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.WordInfo}
 */
proto.cobaltspeech.cubic.WordInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.WordInfo;
  return proto.cobaltspeech.cubic.WordInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.WordInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.WordInfo}
 */
proto.cobaltspeech.cubic.WordInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    case 3:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setStartTime(value);
      break;
    case 4:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.WordInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.WordInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.WordInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.WordInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getStartTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string word = 1;
 * @return {string}
 */
proto.cobaltspeech.cubic.WordInfo.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.WordInfo} returns this
 */
proto.cobaltspeech.cubic.WordInfo.prototype.setWord = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double confidence = 2;
 * @return {number}
 */
proto.cobaltspeech.cubic.WordInfo.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.cobaltspeech.cubic.WordInfo} returns this
 */
proto.cobaltspeech.cubic.WordInfo.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional google.protobuf.Duration start_time = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cobaltspeech.cubic.WordInfo.prototype.getStartTime = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cobaltspeech.cubic.WordInfo} returns this
*/
proto.cobaltspeech.cubic.WordInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.WordInfo} returns this
 */
proto.cobaltspeech.cubic.WordInfo.prototype.clearStartTime = function() {
  return this.setStartTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.WordInfo.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Duration duration = 4;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cobaltspeech.cubic.WordInfo.prototype.getDuration = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 4));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cobaltspeech.cubic.WordInfo} returns this
*/
proto.cobaltspeech.cubic.WordInfo.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.WordInfo} returns this
 */
proto.cobaltspeech.cubic.WordInfo.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.WordInfo.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cobaltspeech.cubic.RecognitionConfusionNetwork.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.RecognitionConfusionNetwork.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.RecognitionConfusionNetwork.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.RecognitionConfusionNetwork} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionConfusionNetwork.toObject = function(includeInstance, msg) {
  var f, obj = {
    linksList: jspb.Message.toObjectList(msg.getLinksList(),
    proto.cobaltspeech.cubic.ConfusionNetworkLink.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.RecognitionConfusionNetwork}
 */
proto.cobaltspeech.cubic.RecognitionConfusionNetwork.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.RecognitionConfusionNetwork;
  return proto.cobaltspeech.cubic.RecognitionConfusionNetwork.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.RecognitionConfusionNetwork} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.RecognitionConfusionNetwork}
 */
proto.cobaltspeech.cubic.RecognitionConfusionNetwork.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cobaltspeech.cubic.ConfusionNetworkLink;
      reader.readMessage(value,proto.cobaltspeech.cubic.ConfusionNetworkLink.deserializeBinaryFromReader);
      msg.addLinks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.RecognitionConfusionNetwork.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.RecognitionConfusionNetwork.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.RecognitionConfusionNetwork} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.RecognitionConfusionNetwork.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cobaltspeech.cubic.ConfusionNetworkLink.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConfusionNetworkLink links = 1;
 * @return {!Array<!proto.cobaltspeech.cubic.ConfusionNetworkLink>}
 */
proto.cobaltspeech.cubic.RecognitionConfusionNetwork.prototype.getLinksList = function() {
  return /** @type{!Array<!proto.cobaltspeech.cubic.ConfusionNetworkLink>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cobaltspeech.cubic.ConfusionNetworkLink, 1));
};


/**
 * @param {!Array<!proto.cobaltspeech.cubic.ConfusionNetworkLink>} value
 * @return {!proto.cobaltspeech.cubic.RecognitionConfusionNetwork} returns this
*/
proto.cobaltspeech.cubic.RecognitionConfusionNetwork.prototype.setLinksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cobaltspeech.cubic.ConfusionNetworkLink=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkLink}
 */
proto.cobaltspeech.cubic.RecognitionConfusionNetwork.prototype.addLinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cobaltspeech.cubic.ConfusionNetworkLink, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cobaltspeech.cubic.RecognitionConfusionNetwork} returns this
 */
proto.cobaltspeech.cubic.RecognitionConfusionNetwork.prototype.clearLinksList = function() {
  return this.setLinksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.ConfusionNetworkLink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.ConfusionNetworkLink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: (f = msg.getStartTime()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    duration: (f = msg.getDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    arcsList: jspb.Message.toObjectList(msg.getArcsList(),
    proto.cobaltspeech.cubic.ConfusionNetworkArc.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkLink}
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.ConfusionNetworkLink;
  return proto.cobaltspeech.cubic.ConfusionNetworkLink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.ConfusionNetworkLink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkLink}
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setStartTime(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    case 3:
      var value = new proto.cobaltspeech.cubic.ConfusionNetworkArc;
      reader.readMessage(value,proto.cobaltspeech.cubic.ConfusionNetworkArc.deserializeBinaryFromReader);
      msg.addArcs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.ConfusionNetworkLink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.ConfusionNetworkLink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getArcsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cobaltspeech.cubic.ConfusionNetworkArc.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Duration start_time = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.getStartTime = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 1));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkLink} returns this
*/
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.setStartTime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkLink} returns this
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.clearStartTime = function() {
  return this.setStartTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Duration duration = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.getDuration = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkLink} returns this
*/
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkLink} returns this
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ConfusionNetworkArc arcs = 3;
 * @return {!Array<!proto.cobaltspeech.cubic.ConfusionNetworkArc>}
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.getArcsList = function() {
  return /** @type{!Array<!proto.cobaltspeech.cubic.ConfusionNetworkArc>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cobaltspeech.cubic.ConfusionNetworkArc, 3));
};


/**
 * @param {!Array<!proto.cobaltspeech.cubic.ConfusionNetworkArc>} value
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkLink} returns this
*/
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.setArcsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cobaltspeech.cubic.ConfusionNetworkArc=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkArc}
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.addArcs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cobaltspeech.cubic.ConfusionNetworkArc, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkLink} returns this
 */
proto.cobaltspeech.cubic.ConfusionNetworkLink.prototype.clearArcsList = function() {
  return this.setArcsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cobaltspeech.cubic.ConfusionNetworkArc.prototype.toObject = function(opt_includeInstance) {
  return proto.cobaltspeech.cubic.ConfusionNetworkArc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cobaltspeech.cubic.ConfusionNetworkArc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ConfusionNetworkArc.toObject = function(includeInstance, msg) {
  var f, obj = {
    word: jspb.Message.getFieldWithDefault(msg, 1, ""),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkArc}
 */
proto.cobaltspeech.cubic.ConfusionNetworkArc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cobaltspeech.cubic.ConfusionNetworkArc;
  return proto.cobaltspeech.cubic.ConfusionNetworkArc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cobaltspeech.cubic.ConfusionNetworkArc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkArc}
 */
proto.cobaltspeech.cubic.ConfusionNetworkArc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cobaltspeech.cubic.ConfusionNetworkArc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cobaltspeech.cubic.ConfusionNetworkArc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cobaltspeech.cubic.ConfusionNetworkArc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cobaltspeech.cubic.ConfusionNetworkArc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string word = 1;
 * @return {string}
 */
proto.cobaltspeech.cubic.ConfusionNetworkArc.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkArc} returns this
 */
proto.cobaltspeech.cubic.ConfusionNetworkArc.prototype.setWord = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double confidence = 2;
 * @return {number}
 */
proto.cobaltspeech.cubic.ConfusionNetworkArc.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.cobaltspeech.cubic.ConfusionNetworkArc} returns this
 */
proto.cobaltspeech.cubic.ConfusionNetworkArc.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


goog.object.extend(exports, proto.cobaltspeech.cubic);
