// Copyright (2019) Cobalt Speech and Language Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: cubic.proto

package cubicpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The encoding of the audio data to be sent for recognition.
//
// For best results, the audio source should be captured and transmitted using
// the RAW_LINEAR16 encoding.
type RecognitionConfig_Encoding int32

const (
	// Raw (headerless) Uncompressed 16-bit signed little endian samples (linear
	// PCM), single channel, sampled at the rate expected by the chosen `Model`.
	RecognitionConfig_RAW_LINEAR16 RecognitionConfig_Encoding = 0
	// WAV (data with RIFF headers), with data sampled at a rate equal to or
	// higher than the sample rate expected by the chosen Model.
	RecognitionConfig_WAV RecognitionConfig_Encoding = 1
	// MP3 data, sampled at a rate equal to or higher than the sampling rate
	// expected by the chosen Model.
	RecognitionConfig_MP3 RecognitionConfig_Encoding = 2
	// FLAC data, sampled at a rate equal to or higher than the sample rate
	// expected by the chosen Model.
	RecognitionConfig_FLAC RecognitionConfig_Encoding = 3
	// VOX data (Dialogic ADPCM), sampled at 8 KHz.
	RecognitionConfig_VOX8000 RecognitionConfig_Encoding = 4
	// Î¼-law (8-bit) encoded RAW data, single channel, sampled at 8 KHz.
	RecognitionConfig_ULAW8000 RecognitionConfig_Encoding = 5
	// A-law (8-bit) encoded RAW data, single channel, sampled at 8 KHz.
	RecognitionConfig_ALAW8000 RecognitionConfig_Encoding = 6
	// Opus (16-bit) encoded RAW data, sampled at a rate equal to or higher than the sample rate expected by the chosen Model.
	RecognitionConfig_OPUS RecognitionConfig_Encoding = 7
)

// Enum value maps for RecognitionConfig_Encoding.
var (
	RecognitionConfig_Encoding_name = map[int32]string{
		0: "RAW_LINEAR16",
		1: "WAV",
		2: "MP3",
		3: "FLAC",
		4: "VOX8000",
		5: "ULAW8000",
		6: "ALAW8000",
		7: "OPUS",
	}
	RecognitionConfig_Encoding_value = map[string]int32{
		"RAW_LINEAR16": 0,
		"WAV":          1,
		"MP3":          2,
		"FLAC":         3,
		"VOX8000":      4,
		"ULAW8000":     5,
		"ALAW8000":     6,
		"OPUS":         7,
	}
)

func (x RecognitionConfig_Encoding) Enum() *RecognitionConfig_Encoding {
	p := new(RecognitionConfig_Encoding)
	*p = x
	return p
}

func (x RecognitionConfig_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecognitionConfig_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_cubic_proto_enumTypes[0].Descriptor()
}

func (RecognitionConfig_Encoding) Type() protoreflect.EnumType {
	return &file_cubic_proto_enumTypes[0]
}

func (x RecognitionConfig_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecognitionConfig_Encoding.Descriptor instead.
func (RecognitionConfig_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{8, 0}
}

// The top-level message sent by the client for the `ListModels` method.
type ListModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{0}
}

// The top-level message sent by the client for the `Recognize` method.  Both
// the `RecognitionConfig` and `RecognitionAudio` fields are required.  The
// entire audio data must be sent in one request.  If your audio data is larger,
// please use the `StreamingRecognize` call..
type RecognizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provides configuration to create the recognizer.
	Config *RecognitionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// The audio data to be recognized
	Audio *RecognitionAudio `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
}

func (x *RecognizeRequest) Reset() {
	*x = RecognizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognizeRequest) ProtoMessage() {}

func (x *RecognizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognizeRequest.ProtoReflect.Descriptor instead.
func (*RecognizeRequest) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{1}
}

func (x *RecognizeRequest) GetConfig() *RecognitionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RecognizeRequest) GetAudio() *RecognitionAudio {
	if x != nil {
		return x.Audio
	}
	return nil
}

// The top-level message sent by the client for the `StreamingRecognize`
// request.  Multiple `StreamingRecognizeRequest` messages are sent. The first
// message must contain a `RecognitionConfig` message only, and all subsequent
// messages must contain `RecognitionAudio` only.  All `RecognitionAudio`
// messages must contain non-empty audio.  If audio content is empty, the server
// may interpret it as end of stream and stop accepting any further messages.
type StreamingRecognizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*StreamingRecognizeRequest_Config
	//	*StreamingRecognizeRequest_Audio
	Request isStreamingRecognizeRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamingRecognizeRequest) Reset() {
	*x = StreamingRecognizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingRecognizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingRecognizeRequest) ProtoMessage() {}

func (x *StreamingRecognizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingRecognizeRequest.ProtoReflect.Descriptor instead.
func (*StreamingRecognizeRequest) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{2}
}

func (m *StreamingRecognizeRequest) GetRequest() isStreamingRecognizeRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamingRecognizeRequest) GetConfig() *RecognitionConfig {
	if x, ok := x.GetRequest().(*StreamingRecognizeRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *StreamingRecognizeRequest) GetAudio() *RecognitionAudio {
	if x, ok := x.GetRequest().(*StreamingRecognizeRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isStreamingRecognizeRequest_Request interface {
	isStreamingRecognizeRequest_Request()
}

type StreamingRecognizeRequest_Config struct {
	Config *RecognitionConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type StreamingRecognizeRequest_Audio struct {
	Audio *RecognitionAudio `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamingRecognizeRequest_Config) isStreamingRecognizeRequest_Request() {}

func (*StreamingRecognizeRequest_Audio) isStreamingRecognizeRequest_Request() {}

// The top-level message sent by the client for the `CompileContext` request. It
// contains a list of phrases or words, paired with a context token included in
// the model being used. The token specifies a category such as "menu_item",
// "airport", "contact", "product_name" etc. The context token is used to
// determine the places in the recognition output where the provided list of
// phrases or words may appear. The allowed context tokens for a given model can
// be found in its `ModelAttributes.ContextInfo` obtained via the `ListModels`
// method.
type CompileContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the model to compile the context information for. The
	// model chosen needs to support context which can be verified by checking its
	// `ModelAttributes.ContextInfo` obtained via `ListModels`.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// The token that is associated with the provided list of phrases or words
	// (e.g "menu_item", "airport" etc.). Must be one of the tokens included in
	// the model being used, which can be retrieved by calling the `ListModels`
	// method.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// List of phrases and/or words to be compiled.
	Phrases []*ContextPhrase `protobuf:"bytes,3,rep,name=phrases,proto3" json:"phrases,omitempty"`
}

func (x *CompileContextRequest) Reset() {
	*x = CompileContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileContextRequest) ProtoMessage() {}

func (x *CompileContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileContextRequest.ProtoReflect.Descriptor instead.
func (*CompileContextRequest) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{3}
}

func (x *CompileContextRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *CompileContextRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CompileContextRequest) GetPhrases() []*ContextPhrase {
	if x != nil {
		return x.Phrases
	}
	return nil
}

// The message sent by the server for the `Version` method.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version of the cubic library handling the recognition
	Cubic string `protobuf:"bytes,1,opt,name=cubic,proto3" json:"cubic,omitempty"`
	// version of the server handling these requests
	Server string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{4}
}

func (x *VersionResponse) GetCubic() string {
	if x != nil {
		return x.Cubic
	}
	return ""
}

func (x *VersionResponse) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

// The message returned to the client by the `ListModels` method.
type ListModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of models available for use that match the request.
	Models []*Model `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{5}
}

func (x *ListModelsResponse) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

// Collection of sequence of recognition results in a portion of audio.  When
// transcribing a single audio channel (e.g. RAW_LINEAR16 input, or a mono
// file), results will be ordered chronologically.  When transcribing multiple
// channels, the results of all channels will be interleaved.  Results of each
// individual channel will be chronological.  No such promise is made for the
// ordering of results of different channels, as results are returned for each
// channel individually as soon as they are ready.
type RecognitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RecognitionResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *RecognitionResponse) Reset() {
	*x = RecognitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionResponse) ProtoMessage() {}

func (x *RecognitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionResponse.ProtoReflect.Descriptor instead.
func (*RecognitionResponse) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{6}
}

func (x *RecognitionResponse) GetResults() []*RecognitionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// The message returned to the client by the `CompileContext` method.
type CompileContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Context information in a compact form that is efficient for use in
	// subsequent recognition requests. The size of the compiled form will depend
	// on the amount of text that was sent for compilation. For 1000 words it's
	// generally less than 100 kilobytes.
	Context *CompiledContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *CompileContextResponse) Reset() {
	*x = CompileContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileContextResponse) ProtoMessage() {}

func (x *CompileContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileContextResponse.ProtoReflect.Descriptor instead.
func (*CompileContextResponse) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{7}
}

func (x *CompileContextResponse) GetContext() *CompiledContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// Configuration for setting up a Recognizer
type RecognitionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the model to use, as obtained from a `Model` message.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Encoding of audio data sent/streamed through the `RecognitionAudio`
	// messages.  For encodings like WAV/MP3 that have headers, the headers are
	// expected to be sent at the beginning of the stream, not in every
	// `RecognitionAudio` message.
	//
	// If not specified, the default encoding is RAW_LINEAR16.
	//
	// Depending on how they are configured, server instances of this service may
	// not support all the encodings enumerated above. They are always required to
	// accept RAW_LINEAR16.  If any other `Encoding` is specified, and it is not
	// available on the server being used, the recognition request will result in
	// an appropriate error message.
	AudioEncoding RecognitionConfig_Encoding `protobuf:"varint,2,opt,name=audio_encoding,json=audioEncoding,proto3,enum=cobaltspeech.cubic.RecognitionConfig_Encoding" json:"audio_encoding,omitempty"`
	// Idle Timeout of the created Recognizer.  If no audio data is received by
	// the recognizer for this duration, ongoing rpc calls will result in an
	// error, the recognizer will be destroyed and thus more audio may not be sent
	// to the same recognizer.  The server may impose a limit on the maximum idle
	// timeout that can be specified, and if the value in this message exceeds
	// that serverside value, creating of the recognizer will fail with an error.
	IdleTimeout *duration.Duration `protobuf:"bytes,3,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// This is an optional field.  If this is set to true, each result will
	// include a list of words and the start time offset (timestamp) and the
	// duration for each of those words.  If set to `false`, no word-level
	// timestamps will be returned.  The default is `false`.
	EnableWordTimeOffsets bool `protobuf:"varint,4,opt,name=enable_word_time_offsets,json=enableWordTimeOffsets,proto3" json:"enable_word_time_offsets,omitempty"`
	// This is an optional field.  If this is set to true, each result will
	// include a list of words and the confidence for those words.  If `false`, no
	// word-level confidence information is returned.  The default is `false`.
	EnableWordConfidence bool `protobuf:"varint,5,opt,name=enable_word_confidence,json=enableWordConfidence,proto3" json:"enable_word_confidence,omitempty"`
	// This is an optional field.  If this is set to true, the field
	// `RecognitionAlternative.raw_transcript` will be populated with the raw
	// transcripts output from the recognizer will be exposed without any
	// formatting rules applied.  If this is set to false, that field will not
	// be set in the results.  The RecognitionAlternative.transcript will
	// always be populated with text formatted according to the server's settings.
	EnableRawTranscript bool `protobuf:"varint,6,opt,name=enable_raw_transcript,json=enableRawTranscript,proto3" json:"enable_raw_transcript,omitempty"`
	// This is an optional field.  If this is set to true, the results will
	// include a confusion network.  If set to `false`, no confusion network will
	// be returned.  The default is `false`.  If the model being used does not
	// support a confusion network, results may be returned without a confusion
	// network available.  If this field is set to `true`, then
	// `enable_raw_transcript` is also forced to be true.
	EnableConfusionNetwork bool `protobuf:"varint,7,opt,name=enable_confusion_network,json=enableConfusionNetwork,proto3" json:"enable_confusion_network,omitempty"`
	// This is an optional field.  If the audio has multiple channels, this field
	// should be configured with the list of channel indices that should be
	// transcribed.  Channels are 0-indexed.
	//
	// Example: `[0]` for a mono file, `[0, 1]` for a stereo file.
	//
	// If this field is not set, a mono file will be assumed by default and only
	// channel-0 will be transcribed even if the file actually has additional
	// channels.
	//
	// Channels that are present in the audio may be omitted, but it is an error
	// to include a channel index in this field that is not present in the audio.
	// Channels may be listed in any order but the same index may not be repeated
	// in this list.
	//
	// BAD: `[0, 2]` for a stereo file; BAD: `[0, 0]` for a mono file.
	AudioChannels []uint32 `protobuf:"varint,8,rep,packed,name=audio_channels,json=audioChannels,proto3" json:"audio_channels,omitempty"`
	// This is an optional field.  If there is any metadata associated with the
	// audio being sent, use this field to provide it to cubic.  The server may
	// record this metadata when processing the request.  The server does not use
	// this field for any other purpose.
	Metadata *RecognitionMetadata `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// This is an optional field for providing any additional context information
	// that may aid speech recognition.  This can also be used to add
	// out-of-vocabulary words to the model or boost recognition of specific
	// proper names or commands. Context information must be pre-compiled via the
	// `CompileContext()` method.
	Context *RecognitionContext `protobuf:"bytes,10,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *RecognitionConfig) Reset() {
	*x = RecognitionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognitionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionConfig) ProtoMessage() {}

func (x *RecognitionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionConfig.ProtoReflect.Descriptor instead.
func (*RecognitionConfig) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{8}
}

func (x *RecognitionConfig) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *RecognitionConfig) GetAudioEncoding() RecognitionConfig_Encoding {
	if x != nil {
		return x.AudioEncoding
	}
	return RecognitionConfig_RAW_LINEAR16
}

func (x *RecognitionConfig) GetIdleTimeout() *duration.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *RecognitionConfig) GetEnableWordTimeOffsets() bool {
	if x != nil {
		return x.EnableWordTimeOffsets
	}
	return false
}

func (x *RecognitionConfig) GetEnableWordConfidence() bool {
	if x != nil {
		return x.EnableWordConfidence
	}
	return false
}

func (x *RecognitionConfig) GetEnableRawTranscript() bool {
	if x != nil {
		return x.EnableRawTranscript
	}
	return false
}

func (x *RecognitionConfig) GetEnableConfusionNetwork() bool {
	if x != nil {
		return x.EnableConfusionNetwork
	}
	return false
}

func (x *RecognitionConfig) GetAudioChannels() []uint32 {
	if x != nil {
		return x.AudioChannels
	}
	return nil
}

func (x *RecognitionConfig) GetMetadata() *RecognitionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RecognitionConfig) GetContext() *RecognitionContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// Metadata associated with the audio to be recognized.
type RecognitionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any custom metadata that the client wants to associate with the recording.
	// This could be a simple string (e.g. a tracing ID) or structured data
	// (e.g. JSON)
	CustomMetadata string `protobuf:"bytes,1,opt,name=custom_metadata,json=customMetadata,proto3" json:"custom_metadata,omitempty"`
}

func (x *RecognitionMetadata) Reset() {
	*x = RecognitionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognitionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionMetadata) ProtoMessage() {}

func (x *RecognitionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionMetadata.ProtoReflect.Descriptor instead.
func (*RecognitionMetadata) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{9}
}

func (x *RecognitionMetadata) GetCustomMetadata() string {
	if x != nil {
		return x.CustomMetadata
	}
	return ""
}

// A collection of additional context information that may aid speech
// recognition.  This can be used to add out-of-vocabulary words to
// the model or to boost recognition of specific proper names or commands.
type RecognitionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of compiled context information, with each entry being compiled from a
	// list of words or phrases using the `CompileContext` method.
	Compiled []*CompiledContext `protobuf:"bytes,1,rep,name=compiled,proto3" json:"compiled,omitempty"`
}

func (x *RecognitionContext) Reset() {
	*x = RecognitionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognitionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionContext) ProtoMessage() {}

func (x *RecognitionContext) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionContext.ProtoReflect.Descriptor instead.
func (*RecognitionContext) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{10}
}

func (x *RecognitionContext) GetCompiled() []*CompiledContext {
	if x != nil {
		return x.Compiled
	}
	return nil
}

// Context information in a compact form that is efficient for use in subsequent
// recognition requests. The size of the compiled form will depend on the amount
// of text that was sent for compilation. For 1000 words it's generally less
// than 100 kilobytes.
type CompiledContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The context information compiled by the `CompileContext` method.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CompiledContext) Reset() {
	*x = CompiledContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledContext) ProtoMessage() {}

func (x *CompiledContext) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledContext.ProtoReflect.Descriptor instead.
func (*CompiledContext) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{11}
}

func (x *CompiledContext) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// A phrase or word that is to be compiled into context information that can be
// later used to improve speech recognition during a `Recognize` or
// `StreamingRecognize` call. Along with the phrase or word itself, there is an
// optional boost parameter that can be used to boost the likelihood of the
// phrase or word in the recognition output.
type ContextPhrase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual phrase or word.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// This is an optional field. The boost value is a positive number which is
	// used to increase the probability of the phrase or word appearing in the
	// output. This setting can be used to differentiate between similar sounding
	// words, with the desired word given a bigger boost value.
	//
	// By default, all phrases or words are given an equal probability of 1/N
	// (where N = total number of phrases or words). If a boost value is provided,
	// the new probability is (boost + 1) * 1/N. We normalize the boosted
	// probabilities for all the phrases or words so that they sum to one. This
	// means that the boost value only has an effect if there are relative
	// differences in the values for different phrases or words. That is, if all
	// phrases or words have the same boost value, after normalization they will
	// all still have the same probability. This also means that the boost value
	// can be any positive value, but it is best to stick between 0 to 20.
	//
	// Negative values are not supported and will be treated as 0 values.
	Boost float32 `protobuf:"fixed32,2,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *ContextPhrase) Reset() {
	*x = ContextPhrase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextPhrase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextPhrase) ProtoMessage() {}

func (x *ContextPhrase) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextPhrase.ProtoReflect.Descriptor instead.
func (*ContextPhrase) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{12}
}

func (x *ContextPhrase) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ContextPhrase) GetBoost() float32 {
	if x != nil {
		return x.Boost
	}
	return 0
}

// Audio to be sent to the recognizer
type RecognitionAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RecognitionAudio) Reset() {
	*x = RecognitionAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognitionAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionAudio) ProtoMessage() {}

func (x *RecognitionAudio) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionAudio.ProtoReflect.Descriptor instead.
func (*RecognitionAudio) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{13}
}

func (x *RecognitionAudio) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Description of a Cubic Model
type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the model.  This identifier is used to choose the
	// model that should be used for recognition, and is specified in the
	// `RecognitionConfig` message.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Model name.  This is a concise name describing the model, and maybe
	// presented to the end-user, for example, to help choose which model to use
	// for their recognition task.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Model attributes
	Attributes *ModelAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{14}
}

func (x *Model) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Model) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Model) GetAttributes() *ModelAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Attributes of a Cubic Model
type ModelAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Audio sample rate supported by the model
	SampleRate uint32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// Attributes specifc to supporting recognition context.
	ContextInfo *ContextInfo `protobuf:"bytes,2,opt,name=context_info,json=contextInfo,proto3" json:"context_info,omitempty"`
}

func (x *ModelAttributes) Reset() {
	*x = ModelAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelAttributes) ProtoMessage() {}

func (x *ModelAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelAttributes.ProtoReflect.Descriptor instead.
func (*ModelAttributes) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{15}
}

func (x *ModelAttributes) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *ModelAttributes) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

// Model information specifc to supporting recognition context.
type ContextInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If this is set to true, the model supports taking context information into
	// account to aid speech recognition. The information may be sent with with
	// recognition requests via RecognitionContext inside RecognitionConfig.
	SupportsContext bool `protobuf:"varint,1,opt,name=supports_context,json=supportsContext,proto3" json:"supports_context,omitempty"`
	// A list of tokens (e.g "name", "airport" etc.) that serve has placeholders
	// in the model where a client provided list of phrases or words may be used
	// to aid speech recognition and produce the exact desired recognition output.
	AllowedContextTokens []string `protobuf:"bytes,2,rep,name=allowed_context_tokens,json=allowedContextTokens,proto3" json:"allowed_context_tokens,omitempty"`
}

func (x *ContextInfo) Reset() {
	*x = ContextInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextInfo) ProtoMessage() {}

func (x *ContextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextInfo.ProtoReflect.Descriptor instead.
func (*ContextInfo) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{16}
}

func (x *ContextInfo) GetSupportsContext() bool {
	if x != nil {
		return x.SupportsContext
	}
	return false
}

func (x *ContextInfo) GetAllowedContextTokens() []string {
	if x != nil {
		return x.AllowedContextTokens
	}
	return nil
}

// A recognition result corresponding to a portion of audio.
type RecognitionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An n-best list of recognition hypotheses alternatives
	Alternatives []*RecognitionAlternative `protobuf:"bytes,1,rep,name=alternatives,proto3" json:"alternatives,omitempty"`
	// If this is set to true, it denotes that the result is an interim partial
	// result, and could change after more audio is processed.  If unset, or set
	// to false, it denotes that this is a final result and will not change.
	//
	// Servers are not required to implement support for returning partial
	// results, and clients should generally not depend on their availability.
	IsPartial bool `protobuf:"varint,2,opt,name=is_partial,json=isPartial,proto3" json:"is_partial,omitempty"`
	// If `enable_confusion_network` was set to true in the `RecognitionConfig`,
	// and if the model supports it, a confusion network will be available in the
	// results.
	Cnet *RecognitionConfusionNetwork `protobuf:"bytes,3,opt,name=cnet,proto3" json:"cnet,omitempty"`
	// Channel of the audio file that this result was transcribed from.  For a
	// mono file, or RAW_LINEAR16 input, this will be set to 0.
	AudioChannel uint32 `protobuf:"varint,4,opt,name=audio_channel,json=audioChannel,proto3" json:"audio_channel,omitempty"`
}

func (x *RecognitionResult) Reset() {
	*x = RecognitionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognitionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionResult) ProtoMessage() {}

func (x *RecognitionResult) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionResult.ProtoReflect.Descriptor instead.
func (*RecognitionResult) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{17}
}

func (x *RecognitionResult) GetAlternatives() []*RecognitionAlternative {
	if x != nil {
		return x.Alternatives
	}
	return nil
}

func (x *RecognitionResult) GetIsPartial() bool {
	if x != nil {
		return x.IsPartial
	}
	return false
}

func (x *RecognitionResult) GetCnet() *RecognitionConfusionNetwork {
	if x != nil {
		return x.Cnet
	}
	return nil
}

func (x *RecognitionResult) GetAudioChannel() uint32 {
	if x != nil {
		return x.AudioChannel
	}
	return 0
}

// A recognition hypothesis
type RecognitionAlternative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text representing the transcription of the words that the user spoke.
	//
	// The transcript will be formatted according to the servers formatting
	// configuration. If you want the raw transcript, please see the field
	// `raw_transcript`.  If the server is configured to not use any formatting,
	// then this field will contain the raw transcript.
	//
	// As an example, if the spoken utterance was "four people", and the
	// server was configured to format numbers, this field would be set to
	// "4 people".
	Transcript string `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// Text representing the transcription of the words that the user spoke,
	// without any formatting.  This field will be populated only the config
	// `RecognitionConfig.enable_raw_transcript` is set to true. Otherwise this
	// field will be an empty string. If you want the formatted transcript, please
	// see the field `transcript`.
	//
	// As an example, if the spoken utterance was `here are four words`,
	// this field would be set to "HERE ARE FOUR WORDS".
	RawTranscript string `protobuf:"bytes,6,opt,name=raw_transcript,json=rawTranscript,proto3" json:"raw_transcript,omitempty"`
	// Confidence estimate between 0 and 1. A higher number represents a higher
	// likelihood of the output being correct.
	Confidence float64 `protobuf:"fixed64,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// A list of word-specific information for each recognized word in the
	// `transcript` field. This is available only if `enable_word_confidence` or
	// `enable_word_time_offsets` was set to `true` in the `RecognitionConfig`.
	Words []*WordInfo `protobuf:"bytes,3,rep,name=words,proto3" json:"words,omitempty"`
	// A list of word-specific information for each recognized word in the
	// `raw_transcript` field. This is available only if `enable_word_confidence`
	// or `enable_word_time_offsets` was set to `true` _and_
	// `enable_raw_transcript` is also set to `true` in the `RecognitionConfig`.
	RawWords []*WordInfo `protobuf:"bytes,7,rep,name=raw_words,json=rawWords,proto3" json:"raw_words,omitempty"`
	// Time offset relative to the beginning of audio received by the recognizer
	// and corresponding to the start of this utterance.
	StartTime *duration.Duration `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Duration of the current utterance in the spoken audio.
	Duration *duration.Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *RecognitionAlternative) Reset() {
	*x = RecognitionAlternative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognitionAlternative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionAlternative) ProtoMessage() {}

func (x *RecognitionAlternative) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionAlternative.ProtoReflect.Descriptor instead.
func (*RecognitionAlternative) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{18}
}

func (x *RecognitionAlternative) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *RecognitionAlternative) GetRawTranscript() string {
	if x != nil {
		return x.RawTranscript
	}
	return ""
}

func (x *RecognitionAlternative) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *RecognitionAlternative) GetWords() []*WordInfo {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *RecognitionAlternative) GetRawWords() []*WordInfo {
	if x != nil {
		return x.RawWords
	}
	return nil
}

func (x *RecognitionAlternative) GetStartTime() *duration.Duration {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *RecognitionAlternative) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// Word-specific information for recognized words
type WordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual word in the text
	Word string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	// Confidence estimate between 0 and 1.  A higher number represents a
	// higher likelihood that the word was correctly recognized.
	Confidence float64 `protobuf:"fixed64,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// Time offset relative to the beginning of audio received by the recognizer
	// and corresponding to the start of this spoken word.
	StartTime *duration.Duration `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Duration of the current word in the spoken audio.
	Duration *duration.Duration `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *WordInfo) Reset() {
	*x = WordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordInfo) ProtoMessage() {}

func (x *WordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordInfo.ProtoReflect.Descriptor instead.
func (*WordInfo) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{19}
}

func (x *WordInfo) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *WordInfo) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *WordInfo) GetStartTime() *duration.Duration {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WordInfo) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// Confusion network in recognition output
type RecognitionConfusionNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*ConfusionNetworkLink `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *RecognitionConfusionNetwork) Reset() {
	*x = RecognitionConfusionNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognitionConfusionNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionConfusionNetwork) ProtoMessage() {}

func (x *RecognitionConfusionNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionConfusionNetwork.ProtoReflect.Descriptor instead.
func (*RecognitionConfusionNetwork) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{20}
}

func (x *RecognitionConfusionNetwork) GetLinks() []*ConfusionNetworkLink {
	if x != nil {
		return x.Links
	}
	return nil
}

// A Link inside a confusion network
type ConfusionNetworkLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time offset relative to the beginning of audio received by the recognizer
	// and corresponding to the start of this link
	StartTime *duration.Duration `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Duration of the current link in the confusion network
	Duration *duration.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// Arcs between this link
	Arcs []*ConfusionNetworkArc `protobuf:"bytes,3,rep,name=arcs,proto3" json:"arcs,omitempty"`
}

func (x *ConfusionNetworkLink) Reset() {
	*x = ConfusionNetworkLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfusionNetworkLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfusionNetworkLink) ProtoMessage() {}

func (x *ConfusionNetworkLink) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfusionNetworkLink.ProtoReflect.Descriptor instead.
func (*ConfusionNetworkLink) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{21}
}

func (x *ConfusionNetworkLink) GetStartTime() *duration.Duration {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ConfusionNetworkLink) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ConfusionNetworkLink) GetArcs() []*ConfusionNetworkArc {
	if x != nil {
		return x.Arcs
	}
	return nil
}

// An Arc inside a Confusion Network Link
type ConfusionNetworkArc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Word in the recognized transcript
	Word string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	// Confidence estimate between 0 and 1.  A higher number represents a higher
	// likelihood that the word was correctly recognized.
	Confidence float64 `protobuf:"fixed64,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *ConfusionNetworkArc) Reset() {
	*x = ConfusionNetworkArc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cubic_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfusionNetworkArc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfusionNetworkArc) ProtoMessage() {}

func (x *ConfusionNetworkArc) ProtoReflect() protoreflect.Message {
	mi := &file_cubic_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfusionNetworkArc.ProtoReflect.Descriptor instead.
func (*ConfusionNetworkArc) Descriptor() ([]byte, []int) {
	return file_cubic_proto_rawDescGZIP(), []int{22}
}

func (x *ConfusionNetworkArc) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *ConfusionNetworkArc) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

var File_cubic_proto protoreflect.FileDescriptor

var file_cubic_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69,
	0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63,
	0x75, 0x62, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x3c, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63,
	0x75, 0x62, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x52, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x73, 0x22, 0x3f, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x62, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x75, 0x62, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x47, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x56, 0x0a, 0x13, 0x52,
	0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x57, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75,
	0x62, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xbb, 0x05, 0x0a,
	0x11, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x55, 0x0a,
	0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x77, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69,
	0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x6b, 0x0a,
	0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x57,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x31, 0x36, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57,
	0x41, 0x56, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x50, 0x33, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x4c, 0x41, 0x43, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x4f, 0x58, 0x38, 0x30,
	0x30, 0x30, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4c, 0x41, 0x57, 0x38, 0x30, 0x30, 0x30,
	0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x41, 0x57, 0x38, 0x30, 0x30, 0x30, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x55, 0x53, 0x10, 0x07, 0x22, 0x3e, 0x0a, 0x13, 0x52, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x12, 0x52, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x3f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x64, 0x22, 0x25, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x05, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69,
	0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x76, 0x0a,
	0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x0c, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6e,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x04, 0x63, 0x6e, 0x65, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xdf, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x61,
	0x77, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62,
	0x69, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x61, 0x77,
	0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3e, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63,
	0x75, 0x62, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x72, 0x63, 0x52, 0x04, 0x61, 0x72, 0x63, 0x73, 0x22, 0x49,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x41, 0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x32, 0xe4, 0x04, 0x0a, 0x05, 0x43, 0x75,
	0x62, 0x69, 0x63, 0x12, 0x5c, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x74, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12,
	0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63,
	0x75, 0x62, 0x69, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x75, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x85,
	0x01, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x28, 0x01, 0x30, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x01, 0x2a,
	0x42, 0x20, 0x5a, 0x09, 0x2e, 0x3b, 0x63, 0x75, 0x62, 0x69, 0x63, 0x70, 0x62, 0xaa, 0x02, 0x12,
	0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x43, 0x75, 0x62,
	0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cubic_proto_rawDescOnce sync.Once
	file_cubic_proto_rawDescData = file_cubic_proto_rawDesc
)

func file_cubic_proto_rawDescGZIP() []byte {
	file_cubic_proto_rawDescOnce.Do(func() {
		file_cubic_proto_rawDescData = protoimpl.X.CompressGZIP(file_cubic_proto_rawDescData)
	})
	return file_cubic_proto_rawDescData
}

var file_cubic_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cubic_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_cubic_proto_goTypes = []interface{}{
	(RecognitionConfig_Encoding)(0),     // 0: cobaltspeech.cubic.RecognitionConfig.Encoding
	(*ListModelsRequest)(nil),           // 1: cobaltspeech.cubic.ListModelsRequest
	(*RecognizeRequest)(nil),            // 2: cobaltspeech.cubic.RecognizeRequest
	(*StreamingRecognizeRequest)(nil),   // 3: cobaltspeech.cubic.StreamingRecognizeRequest
	(*CompileContextRequest)(nil),       // 4: cobaltspeech.cubic.CompileContextRequest
	(*VersionResponse)(nil),             // 5: cobaltspeech.cubic.VersionResponse
	(*ListModelsResponse)(nil),          // 6: cobaltspeech.cubic.ListModelsResponse
	(*RecognitionResponse)(nil),         // 7: cobaltspeech.cubic.RecognitionResponse
	(*CompileContextResponse)(nil),      // 8: cobaltspeech.cubic.CompileContextResponse
	(*RecognitionConfig)(nil),           // 9: cobaltspeech.cubic.RecognitionConfig
	(*RecognitionMetadata)(nil),         // 10: cobaltspeech.cubic.RecognitionMetadata
	(*RecognitionContext)(nil),          // 11: cobaltspeech.cubic.RecognitionContext
	(*CompiledContext)(nil),             // 12: cobaltspeech.cubic.CompiledContext
	(*ContextPhrase)(nil),               // 13: cobaltspeech.cubic.ContextPhrase
	(*RecognitionAudio)(nil),            // 14: cobaltspeech.cubic.RecognitionAudio
	(*Model)(nil),                       // 15: cobaltspeech.cubic.Model
	(*ModelAttributes)(nil),             // 16: cobaltspeech.cubic.ModelAttributes
	(*ContextInfo)(nil),                 // 17: cobaltspeech.cubic.ContextInfo
	(*RecognitionResult)(nil),           // 18: cobaltspeech.cubic.RecognitionResult
	(*RecognitionAlternative)(nil),      // 19: cobaltspeech.cubic.RecognitionAlternative
	(*WordInfo)(nil),                    // 20: cobaltspeech.cubic.WordInfo
	(*RecognitionConfusionNetwork)(nil), // 21: cobaltspeech.cubic.RecognitionConfusionNetwork
	(*ConfusionNetworkLink)(nil),        // 22: cobaltspeech.cubic.ConfusionNetworkLink
	(*ConfusionNetworkArc)(nil),         // 23: cobaltspeech.cubic.ConfusionNetworkArc
	(*duration.Duration)(nil),           // 24: google.protobuf.Duration
	(*empty.Empty)(nil),                 // 25: google.protobuf.Empty
}
var file_cubic_proto_depIdxs = []int32{
	9,  // 0: cobaltspeech.cubic.RecognizeRequest.config:type_name -> cobaltspeech.cubic.RecognitionConfig
	14, // 1: cobaltspeech.cubic.RecognizeRequest.audio:type_name -> cobaltspeech.cubic.RecognitionAudio
	9,  // 2: cobaltspeech.cubic.StreamingRecognizeRequest.config:type_name -> cobaltspeech.cubic.RecognitionConfig
	14, // 3: cobaltspeech.cubic.StreamingRecognizeRequest.audio:type_name -> cobaltspeech.cubic.RecognitionAudio
	13, // 4: cobaltspeech.cubic.CompileContextRequest.phrases:type_name -> cobaltspeech.cubic.ContextPhrase
	15, // 5: cobaltspeech.cubic.ListModelsResponse.models:type_name -> cobaltspeech.cubic.Model
	18, // 6: cobaltspeech.cubic.RecognitionResponse.results:type_name -> cobaltspeech.cubic.RecognitionResult
	12, // 7: cobaltspeech.cubic.CompileContextResponse.context:type_name -> cobaltspeech.cubic.CompiledContext
	0,  // 8: cobaltspeech.cubic.RecognitionConfig.audio_encoding:type_name -> cobaltspeech.cubic.RecognitionConfig.Encoding
	24, // 9: cobaltspeech.cubic.RecognitionConfig.idle_timeout:type_name -> google.protobuf.Duration
	10, // 10: cobaltspeech.cubic.RecognitionConfig.metadata:type_name -> cobaltspeech.cubic.RecognitionMetadata
	11, // 11: cobaltspeech.cubic.RecognitionConfig.context:type_name -> cobaltspeech.cubic.RecognitionContext
	12, // 12: cobaltspeech.cubic.RecognitionContext.compiled:type_name -> cobaltspeech.cubic.CompiledContext
	16, // 13: cobaltspeech.cubic.Model.attributes:type_name -> cobaltspeech.cubic.ModelAttributes
	17, // 14: cobaltspeech.cubic.ModelAttributes.context_info:type_name -> cobaltspeech.cubic.ContextInfo
	19, // 15: cobaltspeech.cubic.RecognitionResult.alternatives:type_name -> cobaltspeech.cubic.RecognitionAlternative
	21, // 16: cobaltspeech.cubic.RecognitionResult.cnet:type_name -> cobaltspeech.cubic.RecognitionConfusionNetwork
	20, // 17: cobaltspeech.cubic.RecognitionAlternative.words:type_name -> cobaltspeech.cubic.WordInfo
	20, // 18: cobaltspeech.cubic.RecognitionAlternative.raw_words:type_name -> cobaltspeech.cubic.WordInfo
	24, // 19: cobaltspeech.cubic.RecognitionAlternative.start_time:type_name -> google.protobuf.Duration
	24, // 20: cobaltspeech.cubic.RecognitionAlternative.duration:type_name -> google.protobuf.Duration
	24, // 21: cobaltspeech.cubic.WordInfo.start_time:type_name -> google.protobuf.Duration
	24, // 22: cobaltspeech.cubic.WordInfo.duration:type_name -> google.protobuf.Duration
	22, // 23: cobaltspeech.cubic.RecognitionConfusionNetwork.links:type_name -> cobaltspeech.cubic.ConfusionNetworkLink
	24, // 24: cobaltspeech.cubic.ConfusionNetworkLink.start_time:type_name -> google.protobuf.Duration
	24, // 25: cobaltspeech.cubic.ConfusionNetworkLink.duration:type_name -> google.protobuf.Duration
	23, // 26: cobaltspeech.cubic.ConfusionNetworkLink.arcs:type_name -> cobaltspeech.cubic.ConfusionNetworkArc
	25, // 27: cobaltspeech.cubic.Cubic.Version:input_type -> google.protobuf.Empty
	1,  // 28: cobaltspeech.cubic.Cubic.ListModels:input_type -> cobaltspeech.cubic.ListModelsRequest
	2,  // 29: cobaltspeech.cubic.Cubic.Recognize:input_type -> cobaltspeech.cubic.RecognizeRequest
	3,  // 30: cobaltspeech.cubic.Cubic.StreamingRecognize:input_type -> cobaltspeech.cubic.StreamingRecognizeRequest
	4,  // 31: cobaltspeech.cubic.Cubic.CompileContext:input_type -> cobaltspeech.cubic.CompileContextRequest
	5,  // 32: cobaltspeech.cubic.Cubic.Version:output_type -> cobaltspeech.cubic.VersionResponse
	6,  // 33: cobaltspeech.cubic.Cubic.ListModels:output_type -> cobaltspeech.cubic.ListModelsResponse
	7,  // 34: cobaltspeech.cubic.Cubic.Recognize:output_type -> cobaltspeech.cubic.RecognitionResponse
	7,  // 35: cobaltspeech.cubic.Cubic.StreamingRecognize:output_type -> cobaltspeech.cubic.RecognitionResponse
	8,  // 36: cobaltspeech.cubic.Cubic.CompileContext:output_type -> cobaltspeech.cubic.CompileContextResponse
	32, // [32:37] is the sub-list for method output_type
	27, // [27:32] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_cubic_proto_init() }
func file_cubic_proto_init() {
	if File_cubic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cubic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingRecognizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognitionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognitionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognitionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompiledContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextPhrase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognitionAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognitionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognitionAlternative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognitionConfusionNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfusionNetworkLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cubic_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfusionNetworkArc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cubic_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*StreamingRecognizeRequest_Config)(nil),
		(*StreamingRecognizeRequest_Audio)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cubic_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cubic_proto_goTypes,
		DependencyIndexes: file_cubic_proto_depIdxs,
		EnumInfos:         file_cubic_proto_enumTypes,
		MessageInfos:      file_cubic_proto_msgTypes,
	}.Build()
	File_cubic_proto = out.File
	file_cubic_proto_rawDesc = nil
	file_cubic_proto_goTypes = nil
	file_cubic_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CubicClient is the client API for Cubic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CubicClient interface {
	// Queries the Version of the Server
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Retrieves a list of available speech recognition models
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Performs synchronous speech recognition: receive results after all audio
	// has been sent and processed.  It is expected that this request be typically
	// used for short audio content: less than a minute long.  For longer content,
	// the `StreamingRecognize` method should be preferred.
	Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognitionResponse, error)
	// Performs bidirectional streaming speech recognition.  Receive results while
	// sending audio.  This method is only available via GRPC and not via
	// HTTP+JSON. However, a web browser may use websockets to use this service.
	StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (Cubic_StreamingRecognizeClient, error)
	// Compiles recognition context information, such as a specialized list of
	// words or phrases, into a compact, efficient form to send with subsequent
	// `Recognize` or `StreamingRecognize` requests to customize speech
	// recognition. For example, a list of contact names may be compiled in a
	// mobile app and sent with each recognition request so that the app user's
	// contact names are more likely to be recognized than arbitrary names. This
	// pre-compilation ensures that there is no added latency for the recognition
	// request. It is important to note that in order to compile context for a
	// model, that model has to support context in the first place, which can be
	// verified by checking its `ModelAttributes.ContextInfo` obtained via the
	// `ListModels` method. Also, the compiled data will be model specific; that
	// is, the data compiled for one model will generally not be usable with a
	// different model.
	CompileContext(ctx context.Context, in *CompileContextRequest, opts ...grpc.CallOption) (*CompileContextResponse, error)
}

type cubicClient struct {
	cc grpc.ClientConnInterface
}

func NewCubicClient(cc grpc.ClientConnInterface) CubicClient {
	return &cubicClient{cc}
}

func (c *cubicClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.cubic.Cubic/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubicClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.cubic.Cubic/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubicClient) Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognitionResponse, error) {
	out := new(RecognitionResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.cubic.Cubic/Recognize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubicClient) StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (Cubic_StreamingRecognizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cubic_serviceDesc.Streams[0], "/cobaltspeech.cubic.Cubic/StreamingRecognize", opts...)
	if err != nil {
		return nil, err
	}
	x := &cubicStreamingRecognizeClient{stream}
	return x, nil
}

type Cubic_StreamingRecognizeClient interface {
	Send(*StreamingRecognizeRequest) error
	Recv() (*RecognitionResponse, error)
	grpc.ClientStream
}

type cubicStreamingRecognizeClient struct {
	grpc.ClientStream
}

func (x *cubicStreamingRecognizeClient) Send(m *StreamingRecognizeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cubicStreamingRecognizeClient) Recv() (*RecognitionResponse, error) {
	m := new(RecognitionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cubicClient) CompileContext(ctx context.Context, in *CompileContextRequest, opts ...grpc.CallOption) (*CompileContextResponse, error) {
	out := new(CompileContextResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.cubic.Cubic/CompileContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CubicServer is the server API for Cubic service.
type CubicServer interface {
	// Queries the Version of the Server
	Version(context.Context, *empty.Empty) (*VersionResponse, error)
	// Retrieves a list of available speech recognition models
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// Performs synchronous speech recognition: receive results after all audio
	// has been sent and processed.  It is expected that this request be typically
	// used for short audio content: less than a minute long.  For longer content,
	// the `StreamingRecognize` method should be preferred.
	Recognize(context.Context, *RecognizeRequest) (*RecognitionResponse, error)
	// Performs bidirectional streaming speech recognition.  Receive results while
	// sending audio.  This method is only available via GRPC and not via
	// HTTP+JSON. However, a web browser may use websockets to use this service.
	StreamingRecognize(Cubic_StreamingRecognizeServer) error
	// Compiles recognition context information, such as a specialized list of
	// words or phrases, into a compact, efficient form to send with subsequent
	// `Recognize` or `StreamingRecognize` requests to customize speech
	// recognition. For example, a list of contact names may be compiled in a
	// mobile app and sent with each recognition request so that the app user's
	// contact names are more likely to be recognized than arbitrary names. This
	// pre-compilation ensures that there is no added latency for the recognition
	// request. It is important to note that in order to compile context for a
	// model, that model has to support context in the first place, which can be
	// verified by checking its `ModelAttributes.ContextInfo` obtained via the
	// `ListModels` method. Also, the compiled data will be model specific; that
	// is, the data compiled for one model will generally not be usable with a
	// different model.
	CompileContext(context.Context, *CompileContextRequest) (*CompileContextResponse, error)
}

// UnimplementedCubicServer can be embedded to have forward compatible implementations.
type UnimplementedCubicServer struct {
}

func (*UnimplementedCubicServer) Version(context.Context, *empty.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedCubicServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (*UnimplementedCubicServer) Recognize(context.Context, *RecognizeRequest) (*RecognitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognize not implemented")
}
func (*UnimplementedCubicServer) StreamingRecognize(Cubic_StreamingRecognizeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRecognize not implemented")
}
func (*UnimplementedCubicServer) CompileContext(context.Context, *CompileContextRequest) (*CompileContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileContext not implemented")
}

func RegisterCubicServer(s *grpc.Server, srv CubicServer) {
	s.RegisterService(&_Cubic_serviceDesc, srv)
}

func _Cubic_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubicServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.cubic.Cubic/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubicServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cubic_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubicServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.cubic.Cubic/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubicServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cubic_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubicServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.cubic.Cubic/Recognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubicServer).Recognize(ctx, req.(*RecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cubic_StreamingRecognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CubicServer).StreamingRecognize(&cubicStreamingRecognizeServer{stream})
}

type Cubic_StreamingRecognizeServer interface {
	Send(*RecognitionResponse) error
	Recv() (*StreamingRecognizeRequest, error)
	grpc.ServerStream
}

type cubicStreamingRecognizeServer struct {
	grpc.ServerStream
}

func (x *cubicStreamingRecognizeServer) Send(m *RecognitionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cubicStreamingRecognizeServer) Recv() (*StreamingRecognizeRequest, error) {
	m := new(StreamingRecognizeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cubic_CompileContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubicServer).CompileContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.cubic.Cubic/CompileContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubicServer).CompileContext(ctx, req.(*CompileContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cubic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cobaltspeech.cubic.Cubic",
	HandlerType: (*CubicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Cubic_Version_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _Cubic_ListModels_Handler,
		},
		{
			MethodName: "Recognize",
			Handler:    _Cubic_Recognize_Handler,
		},
		{
			MethodName: "CompileContext",
			Handler:    _Cubic_CompileContext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRecognize",
			Handler:       _Cubic_StreamingRecognize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cubic.proto",
}
