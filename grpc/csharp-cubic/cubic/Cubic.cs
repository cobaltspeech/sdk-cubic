// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cubic.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CobaltSpeech.Cubic {

  /// <summary>Holder for reflection information generated from cubic.proto</summary>
  public static partial class CubicReflection {

    #region Descriptor
    /// <summary>File descriptor for cubic.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CubicReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtjdWJpYy5wcm90bxISY29iYWx0c3BlZWNoLmN1YmljGhxnb29nbGUvYXBp",
            "L2Fubm90YXRpb25zLnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRpb24u",
            "cHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90byITChFMaXN0TW9k",
            "ZWxzUmVxdWVzdCJ+ChBSZWNvZ25pemVSZXF1ZXN0EjUKBmNvbmZpZxgBIAEo",
            "CzIlLmNvYmFsdHNwZWVjaC5jdWJpYy5SZWNvZ25pdGlvbkNvbmZpZxIzCgVh",
            "dWRpbxgCIAEoCzIkLmNvYmFsdHNwZWVjaC5jdWJpYy5SZWNvZ25pdGlvbkF1",
            "ZGlvIpYBChlTdHJlYW1pbmdSZWNvZ25pemVSZXF1ZXN0EjcKBmNvbmZpZxgB",
            "IAEoCzIlLmNvYmFsdHNwZWVjaC5jdWJpYy5SZWNvZ25pdGlvbkNvbmZpZ0gA",
            "EjUKBWF1ZGlvGAIgASgLMiQuY29iYWx0c3BlZWNoLmN1YmljLlJlY29nbml0",
            "aW9uQXVkaW9IAEIJCgdyZXF1ZXN0IjAKD1ZlcnNpb25SZXNwb25zZRINCgVj",
            "dWJpYxgBIAEoCRIOCgZzZXJ2ZXIYAiABKAkiPwoSTGlzdE1vZGVsc1Jlc3Bv",
            "bnNlEikKBm1vZGVscxgBIAMoCzIZLmNvYmFsdHNwZWVjaC5jdWJpYy5Nb2Rl",
            "bCJNChNSZWNvZ25pdGlvblJlc3BvbnNlEjYKB3Jlc3VsdHMYASADKAsyJS5j",
            "b2JhbHRzcGVlY2guY3ViaWMuUmVjb2duaXRpb25SZXN1bHQijgMKEVJlY29n",
            "bml0aW9uQ29uZmlnEhAKCG1vZGVsX2lkGAEgASgJEkYKDmF1ZGlvX2VuY29k",
            "aW5nGAIgASgOMi4uY29iYWx0c3BlZWNoLmN1YmljLlJlY29nbml0aW9uQ29u",
            "ZmlnLkVuY29kaW5nEi8KDGlkbGVfdGltZW91dBgDIAEoCzIZLmdvb2dsZS5w",
            "cm90b2J1Zi5EdXJhdGlvbhIgChhlbmFibGVfd29yZF90aW1lX29mZnNldHMY",
            "BCABKAgSHgoWZW5hYmxlX3dvcmRfY29uZmlkZW5jZRgFIAEoCBIdChVlbmFi",
            "bGVfcmF3X3RyYW5zY3JpcHQYBiABKAgSIAoYZW5hYmxlX2NvbmZ1c2lvbl9u",
            "ZXR3b3JrGAcgASgIEhYKDmF1ZGlvX2NoYW5uZWxzGAggAygNIlMKCEVuY29k",
            "aW5nEhAKDFJBV19MSU5FQVIxNhAAEgcKA1dBVhABEgcKA01QMxACEggKBEZM",
            "QUMQAxILCgdWT1g4MDAwEAQSDAoIVUxBVzgwMDAQBSIgChBSZWNvZ25pdGlv",
            "bkF1ZGlvEgwKBGRhdGEYASABKAwiWgoFTW9kZWwSCgoCaWQYASABKAkSDAoE",
            "bmFtZRgCIAEoCRI3CgphdHRyaWJ1dGVzGAMgASgLMiMuY29iYWx0c3BlZWNo",
            "LmN1YmljLk1vZGVsQXR0cmlidXRlcyImCg9Nb2RlbEF0dHJpYnV0ZXMSEwoL",
            "c2FtcGxlX3JhdGUYASABKA0ivwEKEVJlY29nbml0aW9uUmVzdWx0EkAKDGFs",
            "dGVybmF0aXZlcxgBIAMoCzIqLmNvYmFsdHNwZWVjaC5jdWJpYy5SZWNvZ25p",
            "dGlvbkFsdGVybmF0aXZlEhIKCmlzX3BhcnRpYWwYAiABKAgSPQoEY25ldBgD",
            "IAEoCzIvLmNvYmFsdHNwZWVjaC5jdWJpYy5SZWNvZ25pdGlvbkNvbmZ1c2lv",
            "bk5ldHdvcmsSFQoNYXVkaW9fY2hhbm5lbBgEIAEoDSLJAQoWUmVjb2duaXRp",
            "b25BbHRlcm5hdGl2ZRISCgp0cmFuc2NyaXB0GAEgASgJEhIKCmNvbmZpZGVu",
            "Y2UYAiABKAESKwoFd29yZHMYAyADKAsyHC5jb2JhbHRzcGVlY2guY3ViaWMu",
            "V29yZEluZm8SLQoKc3RhcnRfdGltZRgEIAEoCzIZLmdvb2dsZS5wcm90b2J1",
            "Zi5EdXJhdGlvbhIrCghkdXJhdGlvbhgFIAEoCzIZLmdvb2dsZS5wcm90b2J1",
            "Zi5EdXJhdGlvbiKIAQoIV29yZEluZm8SDAoEd29yZBgBIAEoCRISCgpjb25m",
            "aWRlbmNlGAIgASgBEi0KCnN0YXJ0X3RpbWUYAyABKAsyGS5nb29nbGUucHJv",
            "dG9idWYuRHVyYXRpb24SKwoIZHVyYXRpb24YBCABKAsyGS5nb29nbGUucHJv",
            "dG9idWYuRHVyYXRpb24iVgobUmVjb2duaXRpb25Db25mdXNpb25OZXR3b3Jr",
            "EjcKBWxpbmtzGAEgAygLMiguY29iYWx0c3BlZWNoLmN1YmljLkNvbmZ1c2lv",
            "bk5ldHdvcmtMaW5rIqkBChRDb25mdXNpb25OZXR3b3JrTGluaxItCgpzdGFy",
            "dF90aW1lGAEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEisKCGR1",
            "cmF0aW9uGAIgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjUKBGFy",
            "Y3MYAyADKAsyJy5jb2JhbHRzcGVlY2guY3ViaWMuQ29uZnVzaW9uTmV0d29y",
            "a0FyYyI3ChNDb25mdXNpb25OZXR3b3JrQXJjEgwKBHdvcmQYASABKAkSEgoK",
            "Y29uZmlkZW5jZRgCIAEoATLaAwoFQ3ViaWMSXAoHVmVyc2lvbhIWLmdvb2ds",
            "ZS5wcm90b2J1Zi5FbXB0eRojLmNvYmFsdHNwZWVjaC5jdWJpYy5WZXJzaW9u",
            "UmVzcG9uc2UiFILT5JMCDhIML2FwaS92ZXJzaW9uEnQKCkxpc3RNb2RlbHMS",
            "JS5jb2JhbHRzcGVlY2guY3ViaWMuTGlzdE1vZGVsc1JlcXVlc3QaJi5jb2Jh",
            "bHRzcGVlY2guY3ViaWMuTGlzdE1vZGVsc1Jlc3BvbnNlIheC0+STAhESDy9h",
            "cGkvbGlzdG1vZGVscxJ1CglSZWNvZ25pemUSJC5jb2JhbHRzcGVlY2guY3Vi",
            "aWMuUmVjb2duaXplUmVxdWVzdBonLmNvYmFsdHNwZWVjaC5jdWJpYy5SZWNv",
            "Z25pdGlvblJlc3BvbnNlIhmC0+STAhMiDi9hcGkvcmVjb2duaXplOgEqEoUB",
            "ChJTdHJlYW1pbmdSZWNvZ25pemUSLS5jb2JhbHRzcGVlY2guY3ViaWMuU3Ry",
            "ZWFtaW5nUmVjb2duaXplUmVxdWVzdBonLmNvYmFsdHNwZWVjaC5jdWJpYy5S",
            "ZWNvZ25pdGlvblJlc3BvbnNlIhOC0+STAg0SCy9hcGkvc3RyZWFtKAEwAUIe",
            "WgdjdWJpY3BiqgISQ29iYWx0U3BlZWNoLkN1YmljYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.ListModelsRequest), global::CobaltSpeech.Cubic.ListModelsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.RecognizeRequest), global::CobaltSpeech.Cubic.RecognizeRequest.Parser, new[]{ "Config", "Audio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.StreamingRecognizeRequest), global::CobaltSpeech.Cubic.StreamingRecognizeRequest.Parser, new[]{ "Config", "Audio" }, new[]{ "Request" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.VersionResponse), global::CobaltSpeech.Cubic.VersionResponse.Parser, new[]{ "Cubic", "Server" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.ListModelsResponse), global::CobaltSpeech.Cubic.ListModelsResponse.Parser, new[]{ "Models" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.RecognitionResponse), global::CobaltSpeech.Cubic.RecognitionResponse.Parser, new[]{ "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.RecognitionConfig), global::CobaltSpeech.Cubic.RecognitionConfig.Parser, new[]{ "ModelId", "AudioEncoding", "IdleTimeout", "EnableWordTimeOffsets", "EnableWordConfidence", "EnableRawTranscript", "EnableConfusionNetwork", "AudioChannels" }, null, new[]{ typeof(global::CobaltSpeech.Cubic.RecognitionConfig.Types.Encoding) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.RecognitionAudio), global::CobaltSpeech.Cubic.RecognitionAudio.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.Model), global::CobaltSpeech.Cubic.Model.Parser, new[]{ "Id", "Name", "Attributes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.ModelAttributes), global::CobaltSpeech.Cubic.ModelAttributes.Parser, new[]{ "SampleRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.RecognitionResult), global::CobaltSpeech.Cubic.RecognitionResult.Parser, new[]{ "Alternatives", "IsPartial", "Cnet", "AudioChannel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.RecognitionAlternative), global::CobaltSpeech.Cubic.RecognitionAlternative.Parser, new[]{ "Transcript", "Confidence", "Words", "StartTime", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.WordInfo), global::CobaltSpeech.Cubic.WordInfo.Parser, new[]{ "Word", "Confidence", "StartTime", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.RecognitionConfusionNetwork), global::CobaltSpeech.Cubic.RecognitionConfusionNetwork.Parser, new[]{ "Links" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.ConfusionNetworkLink), global::CobaltSpeech.Cubic.ConfusionNetworkLink.Parser, new[]{ "StartTime", "Duration", "Arcs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CobaltSpeech.Cubic.ConfusionNetworkArc), global::CobaltSpeech.Cubic.ConfusionNetworkArc.Parser, new[]{ "Word", "Confidence" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The top-level message sent by the client for the `ListModels` method.
  /// </summary>
  public sealed partial class ListModelsRequest : pb::IMessage<ListModelsRequest> {
    private static readonly pb::MessageParser<ListModelsRequest> _parser = new pb::MessageParser<ListModelsRequest>(() => new ListModelsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListModelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsRequest(ListModelsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsRequest Clone() {
      return new ListModelsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListModelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListModelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListModelsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// The top-level message sent by the client for the `Recognize` method.  Both
  /// the `RecognitionConfig` and `RecognitionAudio` fields are required.  The
  /// entire audio data must be sent in one request.  If your audio data is larger,
  /// please use the `StreamingRecognize` call..
  /// </summary>
  public sealed partial class RecognizeRequest : pb::IMessage<RecognizeRequest> {
    private static readonly pb::MessageParser<RecognizeRequest> _parser = new pb::MessageParser<RecognizeRequest>(() => new RecognizeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecognizeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognizeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognizeRequest(RecognizeRequest other) : this() {
      config_ = other.config_ != null ? other.config_.Clone() : null;
      audio_ = other.audio_ != null ? other.audio_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognizeRequest Clone() {
      return new RecognizeRequest(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::CobaltSpeech.Cubic.RecognitionConfig config_;
    /// <summary>
    /// Provides configuration to create the recognizer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CobaltSpeech.Cubic.RecognitionConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "audio" field.</summary>
    public const int AudioFieldNumber = 2;
    private global::CobaltSpeech.Cubic.RecognitionAudio audio_;
    /// <summary>
    /// The audio data to be recognized
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CobaltSpeech.Cubic.RecognitionAudio Audio {
      get { return audio_; }
      set {
        audio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecognizeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecognizeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(Audio, other.Audio)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (audio_ != null) hash ^= Audio.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (audio_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Audio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (audio_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Audio);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecognizeRequest other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::CobaltSpeech.Cubic.RecognitionConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.audio_ != null) {
        if (audio_ == null) {
          audio_ = new global::CobaltSpeech.Cubic.RecognitionAudio();
        }
        Audio.MergeFrom(other.Audio);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::CobaltSpeech.Cubic.RecognitionConfig();
            }
            input.ReadMessage(config_);
            break;
          }
          case 18: {
            if (audio_ == null) {
              audio_ = new global::CobaltSpeech.Cubic.RecognitionAudio();
            }
            input.ReadMessage(audio_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The top-level message sent by the client for the `StreamingRecognize`
  /// request.  Multiple `StreamingRecognizeRequest` messages are sent. The first
  /// message must contain a `RecognitionConfig` message only, and all subsequent
  /// messages must contain `RecognitionAudio` only.  All `RecognitionAudio`
  /// messages must contain non-empty audio.  If audio content is empty, the server
  /// may interpret it as end of stream and stop accepting any further messages.
  /// </summary>
  public sealed partial class StreamingRecognizeRequest : pb::IMessage<StreamingRecognizeRequest> {
    private static readonly pb::MessageParser<StreamingRecognizeRequest> _parser = new pb::MessageParser<StreamingRecognizeRequest>(() => new StreamingRecognizeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamingRecognizeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingRecognizeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingRecognizeRequest(StreamingRecognizeRequest other) : this() {
      switch (other.RequestCase) {
        case RequestOneofCase.Config:
          Config = other.Config.Clone();
          break;
        case RequestOneofCase.Audio:
          Audio = other.Audio.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingRecognizeRequest Clone() {
      return new StreamingRecognizeRequest(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CobaltSpeech.Cubic.RecognitionConfig Config {
      get { return requestCase_ == RequestOneofCase.Config ? (global::CobaltSpeech.Cubic.RecognitionConfig) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Config;
      }
    }

    /// <summary>Field number for the "audio" field.</summary>
    public const int AudioFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CobaltSpeech.Cubic.RecognitionAudio Audio {
      get { return requestCase_ == RequestOneofCase.Audio ? (global::CobaltSpeech.Cubic.RecognitionAudio) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Audio;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      Config = 1,
      Audio = 2,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamingRecognizeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamingRecognizeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(Audio, other.Audio)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.Config) hash ^= Config.GetHashCode();
      if (requestCase_ == RequestOneofCase.Audio) hash ^= Audio.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestCase_ == RequestOneofCase.Config) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (requestCase_ == RequestOneofCase.Audio) {
        output.WriteRawTag(18);
        output.WriteMessage(Audio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.Config) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (requestCase_ == RequestOneofCase.Audio) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Audio);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamingRecognizeRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestCase) {
        case RequestOneofCase.Config:
          if (Config == null) {
            Config = new global::CobaltSpeech.Cubic.RecognitionConfig();
          }
          Config.MergeFrom(other.Config);
          break;
        case RequestOneofCase.Audio:
          if (Audio == null) {
            Audio = new global::CobaltSpeech.Cubic.RecognitionAudio();
          }
          Audio.MergeFrom(other.Audio);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::CobaltSpeech.Cubic.RecognitionConfig subBuilder = new global::CobaltSpeech.Cubic.RecognitionConfig();
            if (requestCase_ == RequestOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
          case 18: {
            global::CobaltSpeech.Cubic.RecognitionAudio subBuilder = new global::CobaltSpeech.Cubic.RecognitionAudio();
            if (requestCase_ == RequestOneofCase.Audio) {
              subBuilder.MergeFrom(Audio);
            }
            input.ReadMessage(subBuilder);
            Audio = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message sent by the server for the `Version` method.
  /// </summary>
  public sealed partial class VersionResponse : pb::IMessage<VersionResponse> {
    private static readonly pb::MessageParser<VersionResponse> _parser = new pb::MessageParser<VersionResponse>(() => new VersionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionResponse(VersionResponse other) : this() {
      cubic_ = other.cubic_;
      server_ = other.server_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionResponse Clone() {
      return new VersionResponse(this);
    }

    /// <summary>Field number for the "cubic" field.</summary>
    public const int CubicFieldNumber = 1;
    private string cubic_ = "";
    /// <summary>
    /// version of the cubic library handling the recognition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cubic {
      get { return cubic_; }
      set {
        cubic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 2;
    private string server_ = "";
    /// <summary>
    /// version of the server handling these requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Server {
      get { return server_; }
      set {
        server_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cubic != other.Cubic) return false;
      if (Server != other.Server) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cubic.Length != 0) hash ^= Cubic.GetHashCode();
      if (Server.Length != 0) hash ^= Server.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cubic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cubic);
      }
      if (Server.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Server);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cubic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cubic);
      }
      if (Server.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Server);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Cubic.Length != 0) {
        Cubic = other.Cubic;
      }
      if (other.Server.Length != 0) {
        Server = other.Server;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Cubic = input.ReadString();
            break;
          }
          case 18: {
            Server = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message returned to the client by the `ListModels` method.
  /// </summary>
  public sealed partial class ListModelsResponse : pb::IMessage<ListModelsResponse> {
    private static readonly pb::MessageParser<ListModelsResponse> _parser = new pb::MessageParser<ListModelsResponse>(() => new ListModelsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListModelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsResponse(ListModelsResponse other) : this() {
      models_ = other.models_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsResponse Clone() {
      return new ListModelsResponse(this);
    }

    /// <summary>Field number for the "models" field.</summary>
    public const int ModelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CobaltSpeech.Cubic.Model> _repeated_models_codec
        = pb::FieldCodec.ForMessage(10, global::CobaltSpeech.Cubic.Model.Parser);
    private readonly pbc::RepeatedField<global::CobaltSpeech.Cubic.Model> models_ = new pbc::RepeatedField<global::CobaltSpeech.Cubic.Model>();
    /// <summary>
    /// List of models available for use that match the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CobaltSpeech.Cubic.Model> Models {
      get { return models_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListModelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListModelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!models_.Equals(other.models_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= models_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      models_.WriteTo(output, _repeated_models_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += models_.CalculateSize(_repeated_models_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListModelsResponse other) {
      if (other == null) {
        return;
      }
      models_.Add(other.models_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            models_.AddEntriesFrom(input, _repeated_models_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Collection of sequence of recognition results in a portion of audio.  When
  /// transcribing a single audio channel (e.g. RAW_LINEAR16 input, or a mono
  /// file), results will be ordered chronologically.  When transcribing multiple
  /// channels, the results of all channels will be interleaved.  Results of each
  /// individual channel will be chronological.  No such promise is made for the
  /// ordering of results of different channels, as results are returned for each
  /// channel individually as soon as they are ready.
  /// </summary>
  public sealed partial class RecognitionResponse : pb::IMessage<RecognitionResponse> {
    private static readonly pb::MessageParser<RecognitionResponse> _parser = new pb::MessageParser<RecognitionResponse>(() => new RecognitionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecognitionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionResponse(RecognitionResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionResponse Clone() {
      return new RecognitionResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CobaltSpeech.Cubic.RecognitionResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::CobaltSpeech.Cubic.RecognitionResult.Parser);
    private readonly pbc::RepeatedField<global::CobaltSpeech.Cubic.RecognitionResult> results_ = new pbc::RepeatedField<global::CobaltSpeech.Cubic.RecognitionResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CobaltSpeech.Cubic.RecognitionResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecognitionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecognitionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecognitionResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration for setting up a Recognizer
  /// </summary>
  public sealed partial class RecognitionConfig : pb::IMessage<RecognitionConfig> {
    private static readonly pb::MessageParser<RecognitionConfig> _parser = new pb::MessageParser<RecognitionConfig>(() => new RecognitionConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecognitionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionConfig(RecognitionConfig other) : this() {
      modelId_ = other.modelId_;
      audioEncoding_ = other.audioEncoding_;
      idleTimeout_ = other.idleTimeout_ != null ? other.idleTimeout_.Clone() : null;
      enableWordTimeOffsets_ = other.enableWordTimeOffsets_;
      enableWordConfidence_ = other.enableWordConfidence_;
      enableRawTranscript_ = other.enableRawTranscript_;
      enableConfusionNetwork_ = other.enableConfusionNetwork_;
      audioChannels_ = other.audioChannels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionConfig Clone() {
      return new RecognitionConfig(this);
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 1;
    private string modelId_ = "";
    /// <summary>
    /// Unique identifier of the model to use, as obtained from a `Model` message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "audio_encoding" field.</summary>
    public const int AudioEncodingFieldNumber = 2;
    private global::CobaltSpeech.Cubic.RecognitionConfig.Types.Encoding audioEncoding_ = 0;
    /// <summary>
    /// Encoding of audio data sent/streamed through the `RecognitionAudio`
    /// messages.  For encodings like WAV/MP3 that have headers, the headers are
    /// expected to be sent at the beginning of the stream, not in every
    /// `RecognitionAudio` message.
    ///
    /// If not specified, the default encoding is RAW_LINEAR16.
    ///
    /// Depending on how they are configured, server instances of this service may
    /// not support all the encodings enumerated above. They are always required to
    /// accept RAW_LINEAR16.  If any other `Encoding` is specified, and it is not
    /// available on the server being used, the recognition request will result in
    /// an appropriate error message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CobaltSpeech.Cubic.RecognitionConfig.Types.Encoding AudioEncoding {
      get { return audioEncoding_; }
      set {
        audioEncoding_ = value;
      }
    }

    /// <summary>Field number for the "idle_timeout" field.</summary>
    public const int IdleTimeoutFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration idleTimeout_;
    /// <summary>
    /// Idle Timeout of the created Recognizer.  If no audio data is received by
    /// the recognizer for this duration, ongoing rpc calls will result in an
    /// error, the recognizer will be destroyed and thus more audio may not be sent
    /// to the same recognizer.  The server may impose a limit on the maximum idle
    /// timeout that can be specified, and if the value in this message exceeds
    /// that serverside value, creating of the recognizer will fail with an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration IdleTimeout {
      get { return idleTimeout_; }
      set {
        idleTimeout_ = value;
      }
    }

    /// <summary>Field number for the "enable_word_time_offsets" field.</summary>
    public const int EnableWordTimeOffsetsFieldNumber = 4;
    private bool enableWordTimeOffsets_;
    /// <summary>
    /// This is an optional field.  If this is set to true, each result will
    /// include a list of words and the start time offset (timestamp) and the
    /// duration for each of those words.  If set to `false`, no word-level
    /// timestamps will be returned.  The default is `false`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableWordTimeOffsets {
      get { return enableWordTimeOffsets_; }
      set {
        enableWordTimeOffsets_ = value;
      }
    }

    /// <summary>Field number for the "enable_word_confidence" field.</summary>
    public const int EnableWordConfidenceFieldNumber = 5;
    private bool enableWordConfidence_;
    /// <summary>
    /// This is an optional field.  If this is set to true, each result will
    /// include a list of words and the confidence for those words.  If `false`, no
    /// word-level confidence information is returned.  The default is `false`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableWordConfidence {
      get { return enableWordConfidence_; }
      set {
        enableWordConfidence_ = value;
      }
    }

    /// <summary>Field number for the "enable_raw_transcript" field.</summary>
    public const int EnableRawTranscriptFieldNumber = 6;
    private bool enableRawTranscript_;
    /// <summary>
    /// This is an optional field.  If this is set to true, the transcripts will be
    /// presented as raw output from the recognizer without any formatting rules
    /// applied.  They will be in all UPPER CASE, numbers and other special
    /// entities would be presented as the spoken words.  If set to `false`,
    /// formatting rules will be applied to all results.  The default is `false`.
    ///
    /// As an example, if the spoken utterance was `here are four words`:
    ///   with this field set to `false`: "Here are 4 words"
    ///   with this field set to 'true' : "HERE ARE FOUR WORDS"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableRawTranscript {
      get { return enableRawTranscript_; }
      set {
        enableRawTranscript_ = value;
      }
    }

    /// <summary>Field number for the "enable_confusion_network" field.</summary>
    public const int EnableConfusionNetworkFieldNumber = 7;
    private bool enableConfusionNetwork_;
    /// <summary>
    /// This is an optional field.  If this is set to true, the results will
    /// include a confusion network.  If set to `false`, no confusion network will
    /// be returned.  The default is `false`.  If the model being used does not
    /// support a confusion network, results may be returned without a confusion
    /// network available.  If this field is set to `true`, then
    /// `enable_raw_transcript` is also forced to be true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableConfusionNetwork {
      get { return enableConfusionNetwork_; }
      set {
        enableConfusionNetwork_ = value;
      }
    }

    /// <summary>Field number for the "audio_channels" field.</summary>
    public const int AudioChannelsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_audioChannels_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> audioChannels_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// This is an optional field.  If the audio has multiple channels, this field
    /// should be configured with the list of channel indices that should be
    /// transcribed.  Channels are 0-indexed.
    ///
    /// Example: `[0]` for a mono file, `[0, 1]` for a stereo file.
    ///
    /// If this field is not set, a mono file will be assumed by default and only
    /// channel-0 will be transcribed even if the file actually has additional
    /// channels.
    ///
    /// Channels that are present in the audio may be omitted, but it is an error
    /// to include a channel index in this field that is not present in the audio.
    /// Channels may be listed in any order but the same index may not be repeated
    /// in this list.
    ///
    /// BAD: `[0, 2]` for a stereo file; BAD: `[0, 0]` for a mono file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AudioChannels {
      get { return audioChannels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecognitionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecognitionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelId != other.ModelId) return false;
      if (AudioEncoding != other.AudioEncoding) return false;
      if (!object.Equals(IdleTimeout, other.IdleTimeout)) return false;
      if (EnableWordTimeOffsets != other.EnableWordTimeOffsets) return false;
      if (EnableWordConfidence != other.EnableWordConfidence) return false;
      if (EnableRawTranscript != other.EnableRawTranscript) return false;
      if (EnableConfusionNetwork != other.EnableConfusionNetwork) return false;
      if(!audioChannels_.Equals(other.audioChannels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (AudioEncoding != 0) hash ^= AudioEncoding.GetHashCode();
      if (idleTimeout_ != null) hash ^= IdleTimeout.GetHashCode();
      if (EnableWordTimeOffsets != false) hash ^= EnableWordTimeOffsets.GetHashCode();
      if (EnableWordConfidence != false) hash ^= EnableWordConfidence.GetHashCode();
      if (EnableRawTranscript != false) hash ^= EnableRawTranscript.GetHashCode();
      if (EnableConfusionNetwork != false) hash ^= EnableConfusionNetwork.GetHashCode();
      hash ^= audioChannels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModelId);
      }
      if (AudioEncoding != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AudioEncoding);
      }
      if (idleTimeout_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(IdleTimeout);
      }
      if (EnableWordTimeOffsets != false) {
        output.WriteRawTag(32);
        output.WriteBool(EnableWordTimeOffsets);
      }
      if (EnableWordConfidence != false) {
        output.WriteRawTag(40);
        output.WriteBool(EnableWordConfidence);
      }
      if (EnableRawTranscript != false) {
        output.WriteRawTag(48);
        output.WriteBool(EnableRawTranscript);
      }
      if (EnableConfusionNetwork != false) {
        output.WriteRawTag(56);
        output.WriteBool(EnableConfusionNetwork);
      }
      audioChannels_.WriteTo(output, _repeated_audioChannels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (AudioEncoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AudioEncoding);
      }
      if (idleTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdleTimeout);
      }
      if (EnableWordTimeOffsets != false) {
        size += 1 + 1;
      }
      if (EnableWordConfidence != false) {
        size += 1 + 1;
      }
      if (EnableRawTranscript != false) {
        size += 1 + 1;
      }
      if (EnableConfusionNetwork != false) {
        size += 1 + 1;
      }
      size += audioChannels_.CalculateSize(_repeated_audioChannels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecognitionConfig other) {
      if (other == null) {
        return;
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      if (other.AudioEncoding != 0) {
        AudioEncoding = other.AudioEncoding;
      }
      if (other.idleTimeout_ != null) {
        if (idleTimeout_ == null) {
          idleTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        IdleTimeout.MergeFrom(other.IdleTimeout);
      }
      if (other.EnableWordTimeOffsets != false) {
        EnableWordTimeOffsets = other.EnableWordTimeOffsets;
      }
      if (other.EnableWordConfidence != false) {
        EnableWordConfidence = other.EnableWordConfidence;
      }
      if (other.EnableRawTranscript != false) {
        EnableRawTranscript = other.EnableRawTranscript;
      }
      if (other.EnableConfusionNetwork != false) {
        EnableConfusionNetwork = other.EnableConfusionNetwork;
      }
      audioChannels_.Add(other.audioChannels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModelId = input.ReadString();
            break;
          }
          case 16: {
            audioEncoding_ = (global::CobaltSpeech.Cubic.RecognitionConfig.Types.Encoding) input.ReadEnum();
            break;
          }
          case 26: {
            if (idleTimeout_ == null) {
              idleTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(idleTimeout_);
            break;
          }
          case 32: {
            EnableWordTimeOffsets = input.ReadBool();
            break;
          }
          case 40: {
            EnableWordConfidence = input.ReadBool();
            break;
          }
          case 48: {
            EnableRawTranscript = input.ReadBool();
            break;
          }
          case 56: {
            EnableConfusionNetwork = input.ReadBool();
            break;
          }
          case 66:
          case 64: {
            audioChannels_.AddEntriesFrom(input, _repeated_audioChannels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RecognitionConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The encoding of the audio data to be sent for recognition.
      ///
      /// For best results, the audio source should be captured and transmitted using
      /// the RAW_LINEAR16 encoding.
      /// </summary>
      public enum Encoding {
        /// <summary>
        /// Raw (headerless) Uncompressed 16-bit signed little endian samples (linear
        /// PCM), single channel, sampled at the rate expected by the chosen `Model`.
        /// </summary>
        [pbr::OriginalName("RAW_LINEAR16")] RawLinear16 = 0,
        /// <summary>
        /// WAV (data with RIFF headers), with data sampled at a rate equal to or
        /// higher than the sample rate expected by the chosen Model.
        /// </summary>
        [pbr::OriginalName("WAV")] Wav = 1,
        /// <summary>
        /// MP3 data, sampled at a rate equal to or higher than the sampling rate
        /// expected by the chosen Model.
        /// </summary>
        [pbr::OriginalName("MP3")] Mp3 = 2,
        /// <summary>
        /// FLAC data, sampled at a rate equal to or higher than the sample rate
        /// expected by the chosen Model.
        /// </summary>
        [pbr::OriginalName("FLAC")] Flac = 3,
        /// <summary>
        /// VOX data (Dialogic ADPCM), sampled at 8 KHz.
        /// </summary>
        [pbr::OriginalName("VOX8000")] Vox8000 = 4,
        /// <summary>
        /// μ-law (8-bit) encoded RAW data, single channel, sampled at 8 KHz.
        /// </summary>
        [pbr::OriginalName("ULAW8000")] Ulaw8000 = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// Audio to be sent to the recognizer
  /// </summary>
  public sealed partial class RecognitionAudio : pb::IMessage<RecognitionAudio> {
    private static readonly pb::MessageParser<RecognitionAudio> _parser = new pb::MessageParser<RecognitionAudio>(() => new RecognitionAudio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecognitionAudio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionAudio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionAudio(RecognitionAudio other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionAudio Clone() {
      return new RecognitionAudio(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecognitionAudio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecognitionAudio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecognitionAudio other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Description of a Cubic Model
  /// </summary>
  public sealed partial class Model : pb::IMessage<Model> {
    private static readonly pb::MessageParser<Model> _parser = new pb::MessageParser<Model>(() => new Model());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Model> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model(Model other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      attributes_ = other.attributes_ != null ? other.attributes_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model Clone() {
      return new Model(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Unique identifier of the model.  This identifier is used to choose the
    /// model that should be used for recognition, and is specified in the
    /// `RecognitionConfig` message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Model name.  This is a concise name describing the model, and maybe
    /// presented to the end-user, for example, to help choose which model to use
    /// for their recognition task.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 3;
    private global::CobaltSpeech.Cubic.ModelAttributes attributes_;
    /// <summary>
    /// Model attributes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CobaltSpeech.Cubic.ModelAttributes Attributes {
      get { return attributes_; }
      set {
        attributes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Model);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Model other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Attributes, other.Attributes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (attributes_ != null) hash ^= Attributes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (attributes_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Attributes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (attributes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attributes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Model other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.attributes_ != null) {
        if (attributes_ == null) {
          attributes_ = new global::CobaltSpeech.Cubic.ModelAttributes();
        }
        Attributes.MergeFrom(other.Attributes);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (attributes_ == null) {
              attributes_ = new global::CobaltSpeech.Cubic.ModelAttributes();
            }
            input.ReadMessage(attributes_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Attributes of a Cubic Model
  /// </summary>
  public sealed partial class ModelAttributes : pb::IMessage<ModelAttributes> {
    private static readonly pb::MessageParser<ModelAttributes> _parser = new pb::MessageParser<ModelAttributes>(() => new ModelAttributes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAttributes(ModelAttributes other) : this() {
      sampleRate_ = other.sampleRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAttributes Clone() {
      return new ModelAttributes(this);
    }

    /// <summary>Field number for the "sample_rate" field.</summary>
    public const int SampleRateFieldNumber = 1;
    private uint sampleRate_;
    /// <summary>
    /// Audio sample rate supported by the model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SampleRate {
      get { return sampleRate_; }
      set {
        sampleRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SampleRate != other.SampleRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SampleRate != 0) hash ^= SampleRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SampleRate != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SampleRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SampleRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SampleRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelAttributes other) {
      if (other == null) {
        return;
      }
      if (other.SampleRate != 0) {
        SampleRate = other.SampleRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SampleRate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A recognition result corresponding to a portion of audio.
  /// </summary>
  public sealed partial class RecognitionResult : pb::IMessage<RecognitionResult> {
    private static readonly pb::MessageParser<RecognitionResult> _parser = new pb::MessageParser<RecognitionResult>(() => new RecognitionResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecognitionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionResult(RecognitionResult other) : this() {
      alternatives_ = other.alternatives_.Clone();
      isPartial_ = other.isPartial_;
      cnet_ = other.cnet_ != null ? other.cnet_.Clone() : null;
      audioChannel_ = other.audioChannel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionResult Clone() {
      return new RecognitionResult(this);
    }

    /// <summary>Field number for the "alternatives" field.</summary>
    public const int AlternativesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CobaltSpeech.Cubic.RecognitionAlternative> _repeated_alternatives_codec
        = pb::FieldCodec.ForMessage(10, global::CobaltSpeech.Cubic.RecognitionAlternative.Parser);
    private readonly pbc::RepeatedField<global::CobaltSpeech.Cubic.RecognitionAlternative> alternatives_ = new pbc::RepeatedField<global::CobaltSpeech.Cubic.RecognitionAlternative>();
    /// <summary>
    /// An n-best list of recognition hypotheses alternatives
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CobaltSpeech.Cubic.RecognitionAlternative> Alternatives {
      get { return alternatives_; }
    }

    /// <summary>Field number for the "is_partial" field.</summary>
    public const int IsPartialFieldNumber = 2;
    private bool isPartial_;
    /// <summary>
    /// If this is set to true, it denotes that the result is an interim partial
    /// result, and could change after more audio is processed.  If unset, or set
    /// to false, it denotes that this is a final result and will not change.
    ///
    /// Servers are not required to implement support for returning partial
    /// results, and clients should generally not depend on their availability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPartial {
      get { return isPartial_; }
      set {
        isPartial_ = value;
      }
    }

    /// <summary>Field number for the "cnet" field.</summary>
    public const int CnetFieldNumber = 3;
    private global::CobaltSpeech.Cubic.RecognitionConfusionNetwork cnet_;
    /// <summary>
    /// If `enable_confusion_network` was set to true in the `RecognitionConfig`,
    /// and if the model supports it, a confusion network will be available in the
    /// results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CobaltSpeech.Cubic.RecognitionConfusionNetwork Cnet {
      get { return cnet_; }
      set {
        cnet_ = value;
      }
    }

    /// <summary>Field number for the "audio_channel" field.</summary>
    public const int AudioChannelFieldNumber = 4;
    private uint audioChannel_;
    /// <summary>
    /// Channel of the audio file that this result was transcribed from.  For a
    /// mono file, or RAW_LINEAR16 input, this will be set to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AudioChannel {
      get { return audioChannel_; }
      set {
        audioChannel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecognitionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecognitionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!alternatives_.Equals(other.alternatives_)) return false;
      if (IsPartial != other.IsPartial) return false;
      if (!object.Equals(Cnet, other.Cnet)) return false;
      if (AudioChannel != other.AudioChannel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= alternatives_.GetHashCode();
      if (IsPartial != false) hash ^= IsPartial.GetHashCode();
      if (cnet_ != null) hash ^= Cnet.GetHashCode();
      if (AudioChannel != 0) hash ^= AudioChannel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      alternatives_.WriteTo(output, _repeated_alternatives_codec);
      if (IsPartial != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsPartial);
      }
      if (cnet_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Cnet);
      }
      if (AudioChannel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AudioChannel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += alternatives_.CalculateSize(_repeated_alternatives_codec);
      if (IsPartial != false) {
        size += 1 + 1;
      }
      if (cnet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cnet);
      }
      if (AudioChannel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AudioChannel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecognitionResult other) {
      if (other == null) {
        return;
      }
      alternatives_.Add(other.alternatives_);
      if (other.IsPartial != false) {
        IsPartial = other.IsPartial;
      }
      if (other.cnet_ != null) {
        if (cnet_ == null) {
          cnet_ = new global::CobaltSpeech.Cubic.RecognitionConfusionNetwork();
        }
        Cnet.MergeFrom(other.Cnet);
      }
      if (other.AudioChannel != 0) {
        AudioChannel = other.AudioChannel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            alternatives_.AddEntriesFrom(input, _repeated_alternatives_codec);
            break;
          }
          case 16: {
            IsPartial = input.ReadBool();
            break;
          }
          case 26: {
            if (cnet_ == null) {
              cnet_ = new global::CobaltSpeech.Cubic.RecognitionConfusionNetwork();
            }
            input.ReadMessage(cnet_);
            break;
          }
          case 32: {
            AudioChannel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A recognition hypothesis
  /// </summary>
  public sealed partial class RecognitionAlternative : pb::IMessage<RecognitionAlternative> {
    private static readonly pb::MessageParser<RecognitionAlternative> _parser = new pb::MessageParser<RecognitionAlternative>(() => new RecognitionAlternative());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecognitionAlternative> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionAlternative() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionAlternative(RecognitionAlternative other) : this() {
      transcript_ = other.transcript_;
      confidence_ = other.confidence_;
      words_ = other.words_.Clone();
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      duration_ = other.duration_ != null ? other.duration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionAlternative Clone() {
      return new RecognitionAlternative(this);
    }

    /// <summary>Field number for the "transcript" field.</summary>
    public const int TranscriptFieldNumber = 1;
    private string transcript_ = "";
    /// <summary>
    /// Text representing the transcription of the words that the user spoke.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Transcript {
      get { return transcript_; }
      set {
        transcript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 2;
    private double confidence_;
    /// <summary>
    /// Confidence estimate between 0 and 1. A higher number represents a higher
    /// likelihood of the output being correct.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    /// <summary>Field number for the "words" field.</summary>
    public const int WordsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::CobaltSpeech.Cubic.WordInfo> _repeated_words_codec
        = pb::FieldCodec.ForMessage(26, global::CobaltSpeech.Cubic.WordInfo.Parser);
    private readonly pbc::RepeatedField<global::CobaltSpeech.Cubic.WordInfo> words_ = new pbc::RepeatedField<global::CobaltSpeech.Cubic.WordInfo>();
    /// <summary>
    /// A list of word-specific information for each recognized word.  This is
    /// available only if `enable_word_confidence` or `enable_word_time_offsets`
    /// was set to `true` in the `RecognitionConfig`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CobaltSpeech.Cubic.WordInfo> Words {
      get { return words_; }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration startTime_;
    /// <summary>
    /// Time offset relative to the beginning of audio received by the recognizer
    /// and corresponding to the start of this utterance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Duration duration_;
    /// <summary>
    /// Duration of the current utterance in the spoken audio.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecognitionAlternative);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecognitionAlternative other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Transcript != other.Transcript) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      if(!words_.Equals(other.words_)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Transcript.Length != 0) hash ^= Transcript.GetHashCode();
      if (Confidence != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Confidence);
      hash ^= words_.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (duration_ != null) hash ^= Duration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Transcript.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Transcript);
      }
      if (Confidence != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Confidence);
      }
      words_.WriteTo(output, _repeated_words_codec);
      if (startTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StartTime);
      }
      if (duration_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Transcript.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Transcript);
      }
      if (Confidence != 0D) {
        size += 1 + 8;
      }
      size += words_.CalculateSize(_repeated_words_codec);
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecognitionAlternative other) {
      if (other == null) {
        return;
      }
      if (other.Transcript.Length != 0) {
        Transcript = other.Transcript;
      }
      if (other.Confidence != 0D) {
        Confidence = other.Confidence;
      }
      words_.Add(other.words_);
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Duration.MergeFrom(other.Duration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Transcript = input.ReadString();
            break;
          }
          case 17: {
            Confidence = input.ReadDouble();
            break;
          }
          case 26: {
            words_.AddEntriesFrom(input, _repeated_words_codec);
            break;
          }
          case 34: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 42: {
            if (duration_ == null) {
              duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(duration_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Word-specific information for recognized words
  /// </summary>
  public sealed partial class WordInfo : pb::IMessage<WordInfo> {
    private static readonly pb::MessageParser<WordInfo> _parser = new pb::MessageParser<WordInfo>(() => new WordInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WordInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WordInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WordInfo(WordInfo other) : this() {
      word_ = other.word_;
      confidence_ = other.confidence_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      duration_ = other.duration_ != null ? other.duration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WordInfo Clone() {
      return new WordInfo(this);
    }

    /// <summary>Field number for the "word" field.</summary>
    public const int WordFieldNumber = 1;
    private string word_ = "";
    /// <summary>
    /// The actual word in the text
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Word {
      get { return word_; }
      set {
        word_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 2;
    private double confidence_;
    /// <summary>
    /// Confidence estimate between 0 and 1.  A higher number represents a
    /// higher likelihood that the word was correctly recognized.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration startTime_;
    /// <summary>
    /// Time offset relative to the beginning of audio received by the recognizer
    /// and corresponding to the start of this spoken word.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration duration_;
    /// <summary>
    /// Duration of the current word in the spoken audio.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WordInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WordInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Word != other.Word) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Word.Length != 0) hash ^= Word.GetHashCode();
      if (Confidence != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Confidence);
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (duration_ != null) hash ^= Duration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Word.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Word);
      }
      if (Confidence != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Confidence);
      }
      if (startTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartTime);
      }
      if (duration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Word.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Word);
      }
      if (Confidence != 0D) {
        size += 1 + 8;
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WordInfo other) {
      if (other == null) {
        return;
      }
      if (other.Word.Length != 0) {
        Word = other.Word;
      }
      if (other.Confidence != 0D) {
        Confidence = other.Confidence;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Duration.MergeFrom(other.Duration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Word = input.ReadString();
            break;
          }
          case 17: {
            Confidence = input.ReadDouble();
            break;
          }
          case 26: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 34: {
            if (duration_ == null) {
              duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(duration_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Confusion network in recognition output
  /// </summary>
  public sealed partial class RecognitionConfusionNetwork : pb::IMessage<RecognitionConfusionNetwork> {
    private static readonly pb::MessageParser<RecognitionConfusionNetwork> _parser = new pb::MessageParser<RecognitionConfusionNetwork>(() => new RecognitionConfusionNetwork());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecognitionConfusionNetwork> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionConfusionNetwork() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionConfusionNetwork(RecognitionConfusionNetwork other) : this() {
      links_ = other.links_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognitionConfusionNetwork Clone() {
      return new RecognitionConfusionNetwork(this);
    }

    /// <summary>Field number for the "links" field.</summary>
    public const int LinksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CobaltSpeech.Cubic.ConfusionNetworkLink> _repeated_links_codec
        = pb::FieldCodec.ForMessage(10, global::CobaltSpeech.Cubic.ConfusionNetworkLink.Parser);
    private readonly pbc::RepeatedField<global::CobaltSpeech.Cubic.ConfusionNetworkLink> links_ = new pbc::RepeatedField<global::CobaltSpeech.Cubic.ConfusionNetworkLink>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CobaltSpeech.Cubic.ConfusionNetworkLink> Links {
      get { return links_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecognitionConfusionNetwork);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecognitionConfusionNetwork other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!links_.Equals(other.links_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= links_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      links_.WriteTo(output, _repeated_links_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += links_.CalculateSize(_repeated_links_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecognitionConfusionNetwork other) {
      if (other == null) {
        return;
      }
      links_.Add(other.links_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            links_.AddEntriesFrom(input, _repeated_links_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Link inside a confusion network
  /// </summary>
  public sealed partial class ConfusionNetworkLink : pb::IMessage<ConfusionNetworkLink> {
    private static readonly pb::MessageParser<ConfusionNetworkLink> _parser = new pb::MessageParser<ConfusionNetworkLink>(() => new ConfusionNetworkLink());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfusionNetworkLink> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionNetworkLink() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionNetworkLink(ConfusionNetworkLink other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      duration_ = other.duration_ != null ? other.duration_.Clone() : null;
      arcs_ = other.arcs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionNetworkLink Clone() {
      return new ConfusionNetworkLink(this);
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration startTime_;
    /// <summary>
    /// Time offset relative to the beginning of audio received by the recognizer
    /// and corresponding to the start of this link
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration duration_;
    /// <summary>
    /// Duration of the current link in the confusion network
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "arcs" field.</summary>
    public const int ArcsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::CobaltSpeech.Cubic.ConfusionNetworkArc> _repeated_arcs_codec
        = pb::FieldCodec.ForMessage(26, global::CobaltSpeech.Cubic.ConfusionNetworkArc.Parser);
    private readonly pbc::RepeatedField<global::CobaltSpeech.Cubic.ConfusionNetworkArc> arcs_ = new pbc::RepeatedField<global::CobaltSpeech.Cubic.ConfusionNetworkArc>();
    /// <summary>
    /// Arcs between this link
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CobaltSpeech.Cubic.ConfusionNetworkArc> Arcs {
      get { return arcs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfusionNetworkLink);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfusionNetworkLink other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if(!arcs_.Equals(other.arcs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (duration_ != null) hash ^= Duration.GetHashCode();
      hash ^= arcs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (duration_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Duration);
      }
      arcs_.WriteTo(output, _repeated_arcs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      size += arcs_.CalculateSize(_repeated_arcs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfusionNetworkLink other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Duration.MergeFrom(other.Duration);
      }
      arcs_.Add(other.arcs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 18: {
            if (duration_ == null) {
              duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(duration_);
            break;
          }
          case 26: {
            arcs_.AddEntriesFrom(input, _repeated_arcs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An Arc inside a Confusion Network Link
  /// </summary>
  public sealed partial class ConfusionNetworkArc : pb::IMessage<ConfusionNetworkArc> {
    private static readonly pb::MessageParser<ConfusionNetworkArc> _parser = new pb::MessageParser<ConfusionNetworkArc>(() => new ConfusionNetworkArc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfusionNetworkArc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CobaltSpeech.Cubic.CubicReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionNetworkArc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionNetworkArc(ConfusionNetworkArc other) : this() {
      word_ = other.word_;
      confidence_ = other.confidence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionNetworkArc Clone() {
      return new ConfusionNetworkArc(this);
    }

    /// <summary>Field number for the "word" field.</summary>
    public const int WordFieldNumber = 1;
    private string word_ = "";
    /// <summary>
    /// Word in the recognized transcript
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Word {
      get { return word_; }
      set {
        word_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 2;
    private double confidence_;
    /// <summary>
    /// Confidence estimate between 0 and 1.  A higher number represents a higher
    /// likelihood that the word was correctly recognized.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfusionNetworkArc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfusionNetworkArc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Word != other.Word) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Word.Length != 0) hash ^= Word.GetHashCode();
      if (Confidence != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Confidence);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Word.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Word);
      }
      if (Confidence != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Confidence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Word.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Word);
      }
      if (Confidence != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfusionNetworkArc other) {
      if (other == null) {
        return;
      }
      if (other.Word.Length != 0) {
        Word = other.Word;
      }
      if (other.Confidence != 0D) {
        Confidence = other.Confidence;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Word = input.ReadString();
            break;
          }
          case 17: {
            Confidence = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
