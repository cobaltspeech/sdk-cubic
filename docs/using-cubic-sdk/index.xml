<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Using Cubic-SDK on Cubic SDK -- Cobalt</title>
    <link>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/</link>
    <description>Recent content in Using Cubic-SDK on Cubic SDK -- Cobalt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installing the SDK</title>
      <link>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/installation/</guid>
      <description>&lt;p&gt;Instructions for installing the SDK are language specific.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setup Connection</title>
      <link>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/connecting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/connecting/</guid>
      <description>&lt;p&gt;Once you have your Cubic server up and running, let&amp;rsquo;s see how we can use the SDK
to connect to it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Synchronous Recognition</title>
      <link>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/recognize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/recognize/</guid>
      <description>&lt;div class=&#34;panel panel-info&#34;&gt;
	&lt;div class=&#34;panel-heading&#34;&gt;Note&lt;/div&gt;
	&lt;div class=&#34;panel-body&#34;&gt;
Synchronous recognize requests are suitable only for audio clips shorter than 30
seconds.  In general, it is strongly recommended that you use streaming
recognition.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The following example shows how to transcribe a short audio clip using Cubic&amp;rsquo;s
Synchoronous Recognize Request. It is assumed that the audio file contains raw
samples, PCM16SLE like Cubic expects.  We will query the server for available
models and use the first model to transcribe this speech.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Streaming Recognition</title>
      <link>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/streaming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/streaming/</guid>
      <description>&lt;p&gt;The following example shows how to transcribe an audio file using Cubicâ€™s
Streaming Recognize Request. The stream can come from a file on disk or be
directly from a microphone in real time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recognition Context</title>
      <link>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/recognition-context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/recognition-context/</guid>
      <description>&lt;p&gt;Cubic allows users to send context information with a recognition request which
may aid the speech recognition. For example, if you have a list of names that
you want to make sure the Cubic model transcribes correctly, with the correct
spelling, then you may provide the list in the form of a
&lt;a href=&#34;../../protobuf/autogen-doc-cubic-proto/#message-recognitioncontext&#34;&gt;&lt;code&gt;RecognitionContext&lt;/code&gt;&lt;/a&gt; object along with the &lt;a href=&#34;../client-configs/#fields&#34;&gt;&lt;code&gt;RecognitionConfig&lt;/code&gt;&lt;/a&gt;
before streaming data.&lt;/p&gt;
&lt;p&gt;Cubic models allow different sets of &amp;ldquo;context tokens&amp;rdquo; each of which can be
paired with a list of words or phrases. For example, a Cubic model may have a
context token for airport names, and you can provide a list of airport names you
want to be recognized correctly for this context token. Likewise, models may
also be configured with tokens for &amp;ldquo;contact list names&amp;rdquo;, &amp;ldquo;menu items&amp;rdquo;, &amp;ldquo;medical jargon&amp;rdquo; etc.&lt;/p&gt;
&lt;p&gt;To ensure that there is no added latency in processing the list of words or
phrases during a recognition request, we have a API method called
&lt;a href=&#34;../../protobuf/autogen-doc-cubic-proto/#service-cubic&#34;&gt;&lt;code&gt;CompileContext()&lt;/code&gt;&lt;/a&gt; that
allows the user to compile the list into a compact, efficient format for
passing to the &lt;code&gt;Recognize()&lt;/code&gt; or &lt;code&gt;StreamingRecognize()&lt;/code&gt; methods.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recognition Configurations</title>
      <link>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/client-configs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/client-configs/</guid>
      <description>An in-depth explanation of the various fields of the complete SDK can be found here. The sub-section RecognitionConfig is particularly important here.
This page here discusses the more common combinations sent to the server.
Fields Here is a quick overview of the fields.
   Field Required Default Description     model_id Yes  Unique ID of the model to use.   audio_encoding Yes  Encoding format of the audio, such as RAW_LINEAR_16, WAV, MP3, etc.</description>
    </item>
    
    <item>
      <title>Android Integrations</title>
      <link>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/android/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cobaltspeech.github.io/sdk-cubic/using-cubic-sdk/android/</guid>
      <description>Adding the protobuf-gradle-plugin to your Android project In your root build.gradle file, add a new protobuf-gradle-plugin dependency
buildscript { // ...  dependencies { // ...  classpath &amp;#34;com.google.protobuf:protobuf-gradle-plugin:0.8.10&amp;#34; // ...  } } This will allow the app&amp;rsquo;s gradle build script to generate the protobuf code.
Generating code from protobuf files Next, you will have to add the code to actually generate the files. To generate the gRPC code, modify your app/build.</description>
    </item>
    
  </channel>
</rss>